{"version":3,"sources":["webpack:///./src/app/models/boxes.ts","webpack:///./src/app/models/brand.ts","webpack:///./src/app/models/enums/frame-material-model.ts","webpack:///./src/app/models/enums/frame-type.ts","webpack:///./src/app/models/enums/power-lens-type.ts","webpack:///./src/app/models/frame-material.ts","webpack:///./src/app/models/frame-model.ts","webpack:///./src/app/models/frame-type.ts","webpack:///./src/app/models/lens-type.ts","webpack:///./src/app/products/boxes/box-model-add/box-model-add.component.html","webpack:///./src/app/products/boxes/box-model-add/box-model-add.component.scss","webpack:///./src/app/products/boxes/box-model-add/box-model-add.component.ts","webpack:///./src/app/products/boxes/box-model-edit/box-model-edit.component.html","webpack:///./src/app/products/boxes/box-model-edit/box-model-edit.component.scss","webpack:///./src/app/products/boxes/box-model-edit/box-model-edit.component.ts","webpack:///./src/app/products/boxes/box-model/box-model.component.html","webpack:///./src/app/products/boxes/box-model/box-model.component.scss","webpack:///./src/app/products/boxes/box-model/box-model.component.ts","webpack:///./src/app/products/brands/brand-add/brand-add.component.html","webpack:///./src/app/products/brands/brand-add/brand-add.component.scss","webpack:///./src/app/products/brands/brand-add/brand-add.component.ts","webpack:///./src/app/products/brands/brand-edit/brand-edit.component.html","webpack:///./src/app/products/brands/brand-edit/brand-edit.component.scss","webpack:///./src/app/products/brands/brand-edit/brand-edit.component.ts","webpack:///./src/app/products/brands/brand/brand.component.html","webpack:///./src/app/products/brands/brand/brand.component.scss","webpack:///./src/app/products/brands/brand/brand.component.ts","webpack:///./src/app/products/glasses/frame-material-add/frame-material-add.component.html","webpack:///./src/app/products/glasses/frame-material-add/frame-material-add.component.scss","webpack:///./src/app/products/glasses/frame-material-add/frame-material-add.component.ts","webpack:///./src/app/products/glasses/frame-material-edit/frame-material-edit.component.html","webpack:///./src/app/products/glasses/frame-material-edit/frame-material-edit.component.scss","webpack:///./src/app/products/glasses/frame-material-edit/frame-material-edit.component.ts","webpack:///./src/app/products/glasses/frame-material/frame-material.component.html","webpack:///./src/app/products/glasses/frame-material/frame-material.component.scss","webpack:///./src/app/products/glasses/frame-material/frame-material.component.ts","webpack:///./src/app/products/glasses/frame-model-add/frame-model-add.component.html","webpack:///./src/app/products/glasses/frame-model-add/frame-model-add.component.scss","webpack:///./src/app/products/glasses/frame-model-add/frame-model-add.component.ts","webpack:///./src/app/products/glasses/frame-model-edit/frame-model-edit.component.html","webpack:///./src/app/products/glasses/frame-model-edit/frame-model-edit.component.scss","webpack:///./src/app/products/glasses/frame-model-edit/frame-model-edit.component.ts","webpack:///./src/app/products/glasses/frame-model/frame-model.component.html","webpack:///./src/app/products/glasses/frame-model/frame-model.component.scss","webpack:///./src/app/products/glasses/frame-model/frame-model.component.ts","webpack:///./src/app/products/glasses/frame-type-add/frame-type-add.component.html","webpack:///./src/app/products/glasses/frame-type-add/frame-type-add.component.scss","webpack:///./src/app/products/glasses/frame-type-add/frame-type-add.component.ts","webpack:///./src/app/products/glasses/frame-type-edit/frame-type-edit.component.html","webpack:///./src/app/products/glasses/frame-type-edit/frame-type-edit.component.scss","webpack:///./src/app/products/glasses/frame-type-edit/frame-type-edit.component.ts","webpack:///./src/app/products/glasses/frame-type/frame-type.component.html","webpack:///./src/app/products/glasses/frame-type/frame-type.component.scss","webpack:///./src/app/products/glasses/frame-type/frame-type.component.ts","webpack:///./src/app/products/glasses/lens-type-add/lens-type-add.component.html","webpack:///./src/app/products/glasses/lens-type-add/lens-type-add.component.scss","webpack:///./src/app/products/glasses/lens-type-add/lens-type-add.component.ts","webpack:///./src/app/products/glasses/lens-type-edit/lens-type-edit.component.html","webpack:///./src/app/products/glasses/lens-type-edit/lens-type-edit.component.scss","webpack:///./src/app/products/glasses/lens-type-edit/lens-type-edit.component.ts","webpack:///./src/app/products/glasses/lens-type/lens-type.component.html","webpack:///./src/app/products/glasses/lens-type/lens-type.component.scss","webpack:///./src/app/products/glasses/lens-type/lens-type.component.ts","webpack:///./src/app/products/products.module.ts","webpack:///./src/app/products/products.router.ts","webpack:///./src/app/services/boxes.service.ts","webpack:///./src/app/services/brand.service.ts","webpack:///./src/app/services/frame-material.service.ts","webpack:///./src/app/services/frame-model.service.ts","webpack:///./src/app/services/lens-type.service.ts"],"names":[],"mappings":"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","file":"products-products-module.js","sourcesContent":["export class Boxes {\n    constructor(public uuid:string,\n        public name:string,\n        public box_model:string,\n        public quantity:number,\n        public retailerPrice:number,\n        public wholesalerPrice:number,\n        public fk_companyid:string){}\n}\n","export class Brand{\n    constructor( public uuid:string,public name:string,public code:string,public fk_companyid:string){}\n}","export enum FrameMaterialModel{\n    ROUND=1,\n    SQUARE=2,\n    RECTANGLE=3,\n    OVAL=4,\n}","export enum FrameType{\n    \"FULL RIM\"=1,\n    \"HALF RIM\"=2,\n    \"RIM LESS\"=3,\n}","export enum PowerLensType{\n    \"Singular\"=1,\n    \"Bifocal\"=2,\n    \"Progressive\"=3,\n    \"Trifocal\"=4,\n}","import { FrameMaterialModel } from \"./enums/frame-material-model\";\n\nexport class FrameMaterial {\n    constructor(public  uuid:string,\n        public name:string,\n        public size:number,\n        public model:string,\n        public quantity:number, \n        public retailerPrice:number,\n        public wholesalerPrice:number,\n        public companyId:string\n         ){}\n}\n","import { Brand } from \"./brand\";\n\nexport class FrameModel{\n    constructor( public uuid:string,public brand:Brand,public model:string,public frametype:string,public size:number,public quantity:number,public retailerPrice:number,public wholesalerPrice:number, public fk_companyid:string){}\n}","export class FrameType {\n}\n","export class LensType {\n    constructor(public uuid:string,\n        public powerlenstype:string,\n        public name:string,\n        public lensmaterial:string,\n        public quantity:number,\n        public retailerPrice:number,\n        public wholesalerPrice:number, \n        public fk_companyid:string ){}\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n  <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n    <mat-toolbar class=\\\"form-header\\\">\\n      <h1 class=\\\"mat-headline\\\">Add Boxes</h1>\\n    </mat-toolbar>\\n    <div  class=\\\"addmargin\\\" style=\\\"background-color: white;\\\">\\n      <form fxLayout=\\\"column\\\"  class=\\\"example-container\\\" #addBoxes=\\\"ngForm\\\" (submit)=\\\"OnSubmit()\\\">\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Name:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n  \\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" #nameInput=\\\"matInput\\\" #nameSelect [(ngModel)]=\\\"boxes.name\\\"  name=\\\"name\\\" #name=\\\"ngModel\\\" autofocus required>\\n      \\n          </mat-form-field>\\n  \\n          <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n            <div *ngIf=\\\"name.errors.required\\\">\\n              Name is required.\\n            </div>\\n           \\n          </div>\\n          </div>\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n            <div fxFlex=\\\"20\\\">\\n                <label class=\\\"example-margin\\\">Box Model:</label>\\n              </div>\\n              <div fxFlex=\\\"50\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n\\n      <input matInput type=\\\"text\\\" placeholder=\\\"Box Model\\\" [(ngModel)]=\\\"boxes.box_model\\\"  name=\\\"box_model\\\" #boxmodel=\\\"ngModel\\\" required>\\n\\n    </mat-form-field>\\n\\n    <div *ngIf=\\\"boxmodel.invalid && (boxmodel.dirty || boxmodel.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n\\n      <div *ngIf=\\\"boxmodel.errors.required\\\">\\n        Box Model is required.\\n      </div>\\n     \\n    </div>\\n    </div>\\n    </div>\\n               \\n                \\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                <div fxFlex=\\\"20\\\">\\n                    <label class=\\\"example-margin\\\">Quantity:</label>\\n                  </div>\\n                  <div fxFlex=\\\"50\\\">\\n      <mat-form-field class=\\\"example-full-width\\\">\\n  \\n          <!-- <input matInput  type=\\\"number\\\" placeholder=\\\"Quantity\\\" pattern=\\\"^\\\\d+(\\\\.\\\\d+)*$\\\" [(ngModel)]=\\\"boxes.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required> -->\\n          <input matInput  type=\\\"number\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"boxes.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n    \\n        </mat-form-field>\\n  \\n        <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n            <div *ngIf=\\\"quantity.errors.required\\\">\\n                Quantity is required.\\n            </div>\\n            <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                Quantity is Greater than Zero.\\n            </div>\\n            <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                Quantity Rate is Not Valid.\\n            </div>\\n          </div>\\n          \\n        </div>\\n        </div>\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                <div fxFlex=\\\"20\\\">\\n                    <label class=\\\"example-margin\\\">Price:</label>\\n                  </div>\\n                  <div fxFlex=\\\"50\\\">\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"20px\\\" fxLayout.xs=\\\"column\\\">\\n                      <div fxFlex=\\\"50\\\">\\n      <mat-form-field class=\\\"example-full-width\\\">\\n\\n          <input matInput type=\\\"number\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"boxes.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n    \\n        </mat-form-field>\\n        <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n            <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                Retailer Price is required.\\n            </div>\\n            <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                Retailer Price is Greater than Zero.\\n            </div>\\n            <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                Retailer Price Rate is Not Valid .\\n            </div>\\n          </div>\\n        </div>\\n        <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n\\n            <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"boxes.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n      \\n          </mat-form-field>\\n          </div>\\n       \\n        </div>\\n      </div>\\n        </div>\\n       \\n   \\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n    <div fxFlex=\\\"20\\\"></div>\\n    <div fxFlex=\\\"50\\\">\\n<button mat-raised-button class=\\\"mat-subheading-2 button-style example-full-width\\\" type=\\\"submit\\\" [(disabled)]=\\\"addBoxes.invalid\\\">Save</button>\\n  </div>\\n</div>\\n            </form>\\n            </div>\\n\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { MatSnackBar, MatInput } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { Boxes } from 'src/app/models/boxes';\nimport { BoxesService } from 'src/app/services/boxes.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Admin } from 'src/app/models/admin';\n\n@Component({\n  selector: 'app-box-model-add',\n  templateUrl: './box-model-add.component.html',\n  styleUrls: ['./box-model-add.component.scss']\n})\nexport class BoxModelAddComponent implements OnInit {\n\n    boxes:Boxes=new Boxes('', '', '', 1, 1, 1, '');\n    @ViewChild('nameInput') nameInput: MatInput;\n    @ViewChild('nameSelect') nameSelect: ElementRef;\n    isLoading: boolean = false;\n    constructor(private boxesService:BoxesService,private loginservice:LoginService,private router:Router,private snackBar:MatSnackBar) { }\n\n  ngOnInit() {\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n        this.router.navigateByUrl('login');\n      }\n      });\n  }\n  OnSubmit(){\n      this.isLoading = true;\n    this.boxesService.addBoxes(this.boxes).subscribe((data)=>{\n        this.isLoading = false;\n        this.snackBar.open(\"Box Added\",\"Success\",{\n            duration:4000\n        });\n        this.nameInput.focus();\n        this.boxes = new Boxes('', '', '', 1, 1, 1,'');\n\n    },\n    \n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         \n        }\n        this.snackBar.open(err.error.error,\"Alert\",{\n            duration:3000\n        });\n       \n      }\n    });\n  }\n}\n","module.exports = \"\\n\\n<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n  <mat-card-title class=\\\"mat-card-title\\\">Edit Boxes Details</mat-card-title>\\n  <span class=\\\"toolbar-spacer\\\"></span>\\n  <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n</mat-toolbar>\\n<form  #editboxes=\\\"ngForm\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n<mat-dialog-content class=\\\"mat-typography\\\">\\n      <div class=\\\"form-group\\\">\\n      <div fxLayout=\\\"column\\\">\\n      \\n      \\n        <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n  \\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"data.name\\\"  name=\\\"name\\\" #name=\\\"ngModel\\\" autofocus required>\\n      \\n          </mat-form-field>\\n  \\n          <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n            <div *ngIf=\\\"name.errors.required\\\">\\n              Name is required.\\n            </div>\\n           \\n          </div>\\n        </div>\\n        <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Box Model\\\" [(ngModel)]=\\\"data.box_model\\\"  name=\\\"box_model\\\" #boxmodel=\\\"ngModel\\\" required>\\n      \\n          </mat-form-field>\\n      \\n          <div *ngIf=\\\"boxmodel.invalid && (boxmodel.dirty || boxmodel.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n            <div *ngIf=\\\"boxmodel.errors.required\\\">\\n              Box Model is required.\\n            </div>\\n           \\n          </div>\\n          </div>\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n    \\n              <input matInput  type=\\\"number\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n        \\n            </mat-form-field>\\n      \\n            <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n        \\n                <div *ngIf=\\\"quantity.errors.required\\\">\\n                    Quantity is required.\\n                </div>\\n                <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                    Quantity is Greater than Zero.\\n                </div>\\n                <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                    Quantity Rate is Not Valid.\\n                </div>\\n              </div>\\n            </div>\\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n  \\n                <input matInput type=\\\"number\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n          \\n              </mat-form-field>\\n              <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n          \\n                  <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                      Retailer Price is required.\\n                  </div>\\n                  <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                      Retailer Price is Greater than Zero.\\n                  </div>\\n                  <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                      RetailerPrice Rate is Not Valid .\\n                  </div>\\n                </div>\\n              </div>\\n              <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                <mat-form-field class=\\\"example-full-width\\\">\\n  \\n                  <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"data.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n            \\n                </mat-form-field>\\n                </div>\\n      </div>\\n   </div>\\n\\n \\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"start\\\">\\n<button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"editboxes.invalid\\\" (click)=\\\"onSubmit()\\\" >Save</button>\\n<button mat-button mat-dialog-close>Cancel</button>\\n<!-- <button mat-button [mat-dialog-close]=\\\"true\\\" cdkFocusInitial>Install</button> -->\\n</mat-dialog-actions>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatSnackBar } from '@angular/material';\nimport { Boxes } from 'src/app/models/boxes';\nimport { BoxesService } from 'src/app/services/boxes.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-box-model-edit',\n  templateUrl: './box-model-edit.component.html',\n  styleUrls: ['./box-model-edit.component.scss']\n})\nexport class BoxModelEditComponent implements OnInit {\n\n    isLoading: boolean = false;\n  constructor( private dialogRef: MatDialogRef<BoxModelEditComponent>,private boxesservice:BoxesService,private router:Router,private snackBar:MatSnackBar,@Inject(MAT_DIALOG_DATA) public data: Boxes) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n  }\n  onSubmit(){\n      this.isLoading = true;\n    this.boxesservice.updateBoxes(this.data).subscribe(\n      ()=>{\n        this.isLoading = false;\n        this.dialogRef.close();\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n              this.router.navigateByUrl('login');\n        }else{\n          this.snackBar.open(err.error.error, \"Alert\", {\n            duration:4000\n          });\n        }\n      }\n    }\n    );\n  }\n\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n  <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n    <mat-toolbar class=\\\"form-header\\\">\\n      <h1 class=\\\"mat-headline\\\">Boxes List</h1>\\n    </mat-toolbar>\\n    <div style=\\\"margin: 10px;\\\">\\n        <button mat-raised-button [hidden]=\\\"addHidden\\\" class=\\\"mat-subheading-2 button-style\\\" routerLink=\\\"add\\\"><mat-icon>add</mat-icon><span style=\\\"margin: 5px;\\\">New</span></button>\\n    </div>\\n<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<div class=\\\"mat-elevation-z8\\\" style=\\\"overflow-y:auto\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i+1}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"boxmodel\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Box Model </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.box_model}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"quantity\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.quantity}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"retailerprice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> RetailerPrice </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.retailerPrice | currency:'INR'}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"wholesalerprice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> WholesalerPrice </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.wholesalerPrice | currency:'INR'}} </td>\\n      </ng-container>\\n    <ng-container matColumnDef=\\\"edit\\\">\\n      <th mat-header-cell *matHeaderCellDef [hidden]=\\\"editHidden\\\"> </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" [hidden]=\\\"editHidden\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"editboxes(element)\\\">edit</mat-icon> </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n    </tr>\\n  </table>\\n\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n</div>\\n</div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Boxes } from 'src/app/models/boxes';\nimport { BoxModelEditComponent } from '../box-model-edit/box-model-edit.component';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatTableDataSource, MatDialog, MatSort, MatPaginator } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { BoxesService } from 'src/app/services/boxes.service';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Admin } from 'src/app/models/admin';\n\n@Component({\n  selector: 'app-box-model',\n  templateUrl: './box-model.component.html',\n  styleUrls: ['./box-model.component.scss']\n})\nexport class BoxModelComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'name','boxmodel','quantity','retailerprice','wholesalerprice','edit'];\n  public boxes: Array<Boxes> = [];\n  editHidden:boolean=false;\n  addHidden:boolean=false;\n   dataSource : MatTableDataSource<Boxes>;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n    isLoading: boolean = false;\n  constructor(private boxesService:BoxesService,private loginservice:LoginService,private router:Router,public dialog: MatDialog) {\n    \n  }\n\n  ngOnInit(){ \n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n    if(data.Identifier===\"employee\"){\n     this.editHidden=true;\n     this.addHidden=true;\n    }\n    });\n    this.isLoading = true;\n    this.boxesService.getallBoxes().subscribe(\n      (data:Array<Boxes>)=>{\n        this.isLoading = false;\n        this.boxes=data;\n        this.dataSource = new MatTableDataSource(this.boxes);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n    \n    )\n    \n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  editboxes(boxes:Boxes){\nconst dialogRef = this.dialog.open(BoxModelEditComponent,{\n  width:\"600px\",\n  data: boxes\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  // console.log(`Dialog result: ${result}`);\n});\n  }\n\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n    <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n      <mat-toolbar class=\\\"form-header\\\">\\n        <h1 class=\\\"mat-headline\\\">Add Brand</h1>\\n      </mat-toolbar>\\n      <div  class=\\\"addmargin\\\" style=\\\"background-color: white;\\\">\\n        <form fxLayout=\\\"column\\\"  class=\\\"example-container\\\" #addBrand=\\\"ngForm\\\" (submit)=\\\"OnSubmit(addBrand)\\\" >\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n            <div fxFlex=\\\"20\\\">\\n                <label class=\\\"example-margin\\\">Name:</label>\\n              </div>\\n              <div fxFlex=\\\"50\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                      <input matInput type=\\\"text\\\" #nameInput=\\\"matInput\\\" #nameSelect (focus)=\\\"$event.target.select()\\\" placeholder=\\\"Brand Name\\\" [(ngModel)]=\\\"brand.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" autofocus required>\\n                    </mat-form-field>\\n                \\n                    <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n            \\n                      <div *ngIf=\\\"name.errors.required\\\">\\n                        Name is required.\\n                      </div>\\n                     \\n                    </div>\\n                 \\n               \\n                  </div>\\n               \\n                  </div>\\n                  \\n                 <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                      <div fxFlex=\\\"20\\\">\\n                          <label class=\\\"example-margin\\\">Code:</label>\\n                        </div>\\n                        <div fxFlex=\\\"50\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n      \\n                <input matInput type=\\\"text\\\" placeholder=\\\"Brand Code\\\" [(ngModel)]=\\\"brand.code\\\"  name=\\\"code\\\" #code=\\\"ngModel\\\">\\n          \\n              </mat-form-field>\\n      \\n              <!-- <div *ngIf=\\\"size.invalid && (size.dirty || size.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n                <div *ngIf=\\\"size.errors.required\\\">\\n                    Size is required.\\n                </div>\\n               \\n              </div> -->\\n              </div>\\n              </div>\\n            \\n         \\n        \\n         \\n     \\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n      <div fxFlex=\\\"20\\\"></div>\\n      <div fxFlex=\\\"50\\\">\\n<button mat-raised-button class=\\\"mat-subheading-2 button-style example-full-width\\\" type=\\\"submit\\\" [disabled]=\\\"addBrand.invalid\\\">Save</button>\\n    </div>\\n  </div>\\n              </form>\\n              </div>\\n\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { BrandService } from 'src/app/services/brand.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar, MatInput } from '@angular/material';\nimport { Brand } from 'src/app/models/brand';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Admin } from 'src/app/models/admin';\n\n@Component({\n  selector: 'app-brand-add',\n  templateUrl: './brand-add.component.html',\n  styleUrls: ['./brand-add.component.scss']\n})\nexport class BrandAddComponent implements OnInit {\nbrand:Brand=new Brand('','','','');\n@ViewChild('nameInput') nameInput: MatInput;\n@ViewChild('nameSelect') nameSelect: ElementRef;\nisLoading: boolean = false;\n  constructor(private brandService:BrandService,private loginservice:LoginService,private router:Router,private snackBar:MatSnackBar) { }\n\n  ngOnInit() {\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n        this.router.navigateByUrl('login');\n      }\n      });\n  }\n  OnSubmit(form){\n    this.isLoading = true;\nthis.brandService.addBrand(this.brand).subscribe(\n      (data)=>{\n        this.isLoading = false;\n        this.snackBar.open(\"Brand Added\",\"Success\",{\n          duration:4000\n        });\n        this.nameInput.focus();\n        this.brand=new Brand('','','','');\n        \n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         \n        } else {\n          this.snackBar.open(err.error.error,\"Alert\",{\n            duration:3000\n          });\n        //   this.brand=err.error.data;\n        //   this.nameInput.focus();\n        //   const nameselect=<HTMLInputElement>this.nameSelect.nativeElement;\n        //   setTimeout(function() {  nameselect.select(); }, 50);\n         \n         \n        }\n       \n      }\n\n    }\n    );\n  }\n}\n","module.exports = \"<!-- <h2 mat-dialog-title>Install Angular</h2> -->\\n\\n<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n    <mat-card-title class=\\\"mat-card-title\\\">Edit Brand Details</mat-card-title>\\n    <span class=\\\"toolbar-spacer\\\"></span>\\n    <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n  </mat-toolbar>\\n  <form  #editBrand=\\\"ngForm\\\">\\n    <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n      <mat-spinner></mat-spinner>\\n    </div>\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\n        <div class=\\\"form-group\\\">\\n        <div fxLayout=\\\"column\\\">\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput [(ngModel)]=\\\"data.name\\\" placeholder=\\\"Brand Name\\\" name=\\\"name\\\" autofocus>\\n              </mat-form-field>\\n          </div>\\n        \\n      \\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                  <input matInput [(ngModel)]=\\\"data.code\\\" placeholder=\\\"Brand Code\\\" name=\\\"code\\\">\\n                </mat-form-field>\\n            </div>\\n           \\n             \\n        </div>\\n     </div>\\n  \\n   \\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"start\\\">\\n  <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"editBrand.invalid\\\" (click)=\\\"onSubmit()\\\" >Save</button>\\n<button mat-button mat-dialog-close>Cancel</button>\\n</mat-dialog-actions>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { Brand } from 'src/app/models/brand';\nimport { MAT_DIALOG_DATA, MatSnackBar, MatDialogRef } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { BrandService } from 'src/app/services/brand.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-brand-edit',\n  templateUrl: './brand-edit.component.html',\n  styleUrls: ['./brand-edit.component.scss']\n})\nexport class BrandEditComponent implements OnInit {\nisLoading: boolean = false;\n  constructor( private dialogRef: MatDialogRef<BrandEditComponent>,private brandService:BrandService,private router:Router,private snackBar:MatSnackBar,@Inject(MAT_DIALOG_DATA) public data: Brand) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n  }\n  onSubmit(){\n      this.isLoading = true;\n    this.brandService.updateBrand(this.data).subscribe(\n      ()=>{\n          this.isLoading = false;\n        this.dialogRef.close();\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n              this.router.navigateByUrl('login');\n        }else{\n          this.snackBar.open(\"Updated Failed\",\"Alert\",{\n            duration:4000\n          });\n        }\n      }\n    }\n    );\n  }\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n    <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n      <mat-toolbar class=\\\"form-header\\\">\\n        <h1 class=\\\"mat-headline\\\">Brand List</h1>\\n      </mat-toolbar>\\n      <div style=\\\"margin: 10px;\\\">\\n          <button [hidden]=\\\"addHidden\\\" mat-raised-button class=\\\"mat-subheading-2 button-style\\\" routerLink=\\\"add\\\"><mat-icon>add</mat-icon><span style=\\\"margin: 5px;\\\">New</span></button>\\n      </div>\\n<mat-form-field>\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n  \\n  <div class=\\\"mat-elevation-z8\\\" style=\\\"overflow-y:auto\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n  \\n      <!-- ID Column -->\\n      <ng-container matColumnDef=\\\"id\\\">\\n        <th mat-header-cell *matHeaderCellDef> ID </th>\\n        <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i+1}} </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Brand Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n    \\n      <ng-container matColumnDef=\\\"code\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Brand Code </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.code}} </td>\\n        </ng-container>\\n     \\n      <ng-container matColumnDef=\\\"edit\\\">\\n        <th mat-header-cell *matHeaderCellDef [hidden]=\\\"editHidden\\\"> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [hidden]=\\\"editHidden\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"editBrand(element)\\\">edit</mat-icon> </td>\\n      </ng-container>\\n     \\n      <ng-container matColumnDef=\\\"delete\\\">\\n        <th mat-header-cell *matHeaderCellDef [hidden]=\\\"deleteHidden\\\"> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [hidden]=\\\"deleteHidden\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"deleteBrand(element)\\\">delete</mat-icon> </td>\\n      </ng-container>\\n   \\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n      </tr>\\n    </table>\\n  \\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n  </div>\\n  </div>\\n  </div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Brand } from 'src/app/models/brand';\nimport { BrandEditComponent } from '../brand-edit/brand-edit.component';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatTableDataSource, MatDialog, MatPaginator, MatSort } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { BrandService } from 'src/app/services/brand.service';\nimport { Admin } from 'src/app/models/admin';\nimport { LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-brand',\n  templateUrl: './brand.component.html',\n  styleUrls: ['./brand.component.scss']\n})\nexport class BrandComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'name','code','edit','delete'];\n  editHidden:boolean=false;\n  addHidden:boolean=false;\n  deleteHidden:boolean=false;\n  public brands: Array<Brand> = [];\n  public dataSource = new MatTableDataSource<Brand>(this.brands);\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n    isLoading: boolean = false;\n  constructor(private brandService:BrandService,private loginservice:LoginService,private router:Router,public dialog: MatDialog) {\n    \n  }\n\n  ngOnInit() {\n    this.onload();\n    // this.brandService.getallBrand().subscribe(\n    //   (data:Array<Brand>)=>{\n    //     this.brands=data;\n    //     this.dataSource = new MatTableDataSource(this.brands);\n    //     this.dataSource.paginator = this.paginator;\n    //     this.dataSource.sort = this.sort;\n    // },\n    // (err)=>{\n    //   if(err instanceof HttpErrorResponse){\n    //     if(err.status===401){\n    //       this.router.navigateByUrl('login');\n    //      }\n    //   }\n    // }\n    \n    // )\n    }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  editBrand(brand:Brand){\nconst dialogRef = this.dialog.open(BrandEditComponent,{\n  width:\"600px\",\n  data: brand\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  // console.log(`Dialog result: ${result}`);\n});\n  }\n  deleteBrand(brand:Brand){\n    if(confirm('Are You Sure to Delete this Brand ?') === true){\n        this.isLoading = true;\n    this.brandService.deleteBrand(brand.uuid).subscribe((response:any)=>{\n        this.isLoading = false;\n     this.onload();\n    })\n  }\n}\nonload():void{\n    this.isLoading = true;\n  this.loginservice.getUserName().subscribe((data:Admin)=>{\n    if(data.Identifier===\"employee\"){\n      this.editHidden=true;\n      this.addHidden=true;\n      this.deleteHidden=true;\n    }\n   this.brandService.getallBrand().subscribe(\n    (data:Array<Brand>)=>{\n        this.isLoading = false;\n      this.brands=data;\n      this.dataSource = new MatTableDataSource(this.brands);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n  },\n  (err)=>{\n    if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n      if(err.status===401){\n        this.router.navigateByUrl('login');\n       }\n    }\n  }\n  \n  );\n});\n}\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n    <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n      <mat-toolbar class=\\\"form-header\\\">\\n        <h1 class=\\\"mat-headline\\\">Add Frame Material</h1>\\n      </mat-toolbar>\\n      <div  class=\\\"addmargin\\\" style=\\\"background-color: white;\\\">\\n        <form fxLayout=\\\"column\\\"  class=\\\"example-container\\\" #addFrameMaterial=\\\"ngForm\\\" >\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n            <div fxFlex=\\\"20\\\">\\n                <label class=\\\"example-margin\\\">Name:</label>\\n              </div>\\n              <div fxFlex=\\\"50\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                      <input matInput type=\\\"text\\\" #nameInput=\\\"matInput\\\" #nameSelect (focus)=\\\"$event.target.select()\\\" placeholder=\\\"Frame Material Name\\\" [(ngModel)]=\\\"framematerial.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" required autofocus>\\n                    </mat-form-field>\\n                \\n                    <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n            \\n                      <div *ngIf=\\\"name.errors.required\\\">\\n                        Name is required.\\n                      </div>\\n                     \\n                    </div>\\n                 \\n               \\n                  </div>\\n               \\n                  </div>\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                    <div fxFlex=\\\"20\\\">\\n                        <label class=\\\"example-margin\\\">Model:</label>\\n                      </div>\\n                      <div fxFlex=\\\"50\\\">\\n                        <mat-form-field class=\\\"example-full-width\\\">\\n                          <mat-select  placeholder=\\\"Frame Material Model\\\" [(ngModel)]=\\\"framematerial.model\\\" #model=\\\"ngModel\\\" name=\\\"model\\\" required>\\n                            <!-- <mat-option>None</mat-option> -->\\n                            <mat-option *ngFor=\\\"let model of models\\\" [value]=\\\"model\\\">{{model}}</mat-option>\\n                          </mat-select>\\n                        </mat-form-field>\\n                        <div *ngIf=\\\"model.invalid && (model.dirty || model.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n            \\n                            <div *ngIf=\\\"model.errors.required\\\">\\n                              Model is required.\\n                            </div>\\n                           \\n                          </div>\\n                       \\n                          </div>\\n                       \\n                          </div>\\n                 \\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                      <div fxFlex=\\\"20\\\">\\n                          <label class=\\\"example-margin\\\">Size:</label>\\n                        </div>\\n                        <div fxFlex=\\\"50\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n      \\n                <input matInput type=\\\"number\\\" placeholder=\\\"Size\\\" [(ngModel)]=\\\"framematerial.size\\\"  name=\\\"size\\\" #size=\\\"ngModel\\\" required>\\n          \\n              </mat-form-field>\\n      \\n              <div *ngIf=\\\"size.invalid && (size.dirty || size.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n                <div *ngIf=\\\"size.errors.required\\\">\\n                    Size is required.\\n                </div>\\n               \\n              </div>\\n              </div>\\n              </div>\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Quantity:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n    \\n            <input matInput  type=\\\"number\\\" #QuantitySelect #quantityInput=\\\"matInput\\\" placeholder=\\\"Quantity\\\" pattern=\\\"^\\\\d+(\\\\.\\\\d+)*$\\\" [(ngModel)]=\\\"framematerial.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n      \\n          </mat-form-field>\\n    \\n          <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n              <div *ngIf=\\\"quantity.errors.required\\\">\\n                  Quantity is required.\\n              </div>\\n              <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                  Quantity is Greater than Zero.\\n              </div>\\n              <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                  Quantity Rate is Not Valid.\\n              </div>\\n            </div>\\n            <div class=\\\"mat-body-1 center-align\\\">{{addframematerial}}</div>\\n            \\n          </div>\\n          </div>\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Price:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n                      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"20px\\\" fxLayout.xs=\\\"column\\\">\\n                        <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n  \\n            <input matInput type=\\\"number\\\" #retailerpriceSelect #retailerpriceInput=\\\"matInput\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"framematerial.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n      \\n          </mat-form-field>\\n          <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n              <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                  Retailer Price is required.\\n              </div>\\n              <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                  Retailer Price is Greater than Zero.\\n              </div>\\n              <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                  RetailerPrice Rate is Not Valid .\\n              </div>\\n            </div>\\n          </div>\\n          <div fxFlex=\\\"50\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n  \\n              <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"framematerial.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n        \\n            </mat-form-field>\\n            </div>\\n         \\n          </div>\\n        </div>\\n          </div>\\n         \\n     \\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n      <div fxFlex=\\\"20\\\"></div>\\n      <div fxFlex=\\\"50\\\">\\n<button mat-raised-button class=\\\"mat-subheading-2 button-style example-full-width\\\" type=\\\"reset\\\" [disabled]=\\\"addFrameMaterial.invalid\\\" (click)=\\\"OnSubmit(addFrameMaterial)\\\">Save</button>\\n    </div>\\n  </div>\\n              </form>\\n              </div>\\n\\n  </div>\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FrameMaterial } from 'src/app/models/frame-material';\nimport { FrameMaterialService } from 'src/app/services/frame-material.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MatSnackBar, MatInput } from '@angular/material';\nimport { FrameMaterialModel } from 'src/app/models/enums/frame-material-model';\nimport { NgForm } from '@angular/forms';\n@Component({\n  selector: 'app-frame-material-add',\n  templateUrl: './frame-material-add.component.html',\n  styleUrls: ['./frame-material-add.component.scss']\n})\nexport class FrameMaterialAddComponent implements OnInit {\n  selected:string=\"\";\nFrameMaterialModel : typeof FrameMaterialModel = FrameMaterialModel;\nframematerial:FrameMaterial=new FrameMaterial('','',1,this.selected,1,1,1,'');\nmodels : string[];\n@ViewChild('quantityInput') Quantity: MatInput;\n@ViewChild('retailerpriceInput') RetailerPrice: MatInput;\n@ViewChild('nameInput') nameInput: MatInput;\n@ViewChild('nameSelect') nameSelect: ElementRef;\n@ViewChild('QuantitySelect') QuantitySelect: ElementRef;\n@ViewChild('retailerpriceSelect') retailerpriceSelect: ElementRef;\nisLoading: boolean = false;\n  constructor(private frameMaterialService:FrameMaterialService,private router:Router,private snackBar:MatSnackBar) { }\n \n  ngOnInit() {\n    var x = FrameMaterialModel;\n    var options = Object.keys(x);\n    this.models = options.slice(options.length / 2);\n    this.selected=this.models[0];\n    this.nameInput.focus();\n    this.framematerial.model=this.models[0];\n  }\n  OnSubmit(form){\n    // if(this.framematerial.quantity <= 0){\n    //     this.framematerial=this.framematerial;\n    //     this.Quantity.focus();\n    //     const select=<HTMLInputElement>this.QuantitySelect.nativeElement;\n    //     setTimeout(function() {  select.select(); }, 50);\n    //     this.snackBar.open(\"Quantity is Greater Zero\",\"Alert\",{\n    //      duration:3000\n    //    });\n    //   }else if(this.framematerial.retailerPrice <= 0){\n    //         this.framematerial=this.framematerial;\n    //         this.RetailerPrice.focus();\n    //         const select=<HTMLInputElement>this.retailerpriceSelect.nativeElement;\n    //         setTimeout(function() {  select.select(); }, 50);\n    //         this.snackBar.open(\"RetailerPrice is Greater Zero\",\"Alert\",{\n    //          duration:3000\n    //        });\n    //   }\n    //   else{\n        this.isLoading = true;\nthis.frameMaterialService.addFrameMaterial(this.framematerial).subscribe(\n      (data)=>{\n        this.isLoading = false;\n        this.snackBar.open(\"Frame Material Added\",\"Success\",{\n          duration:4000\n        });\n        this.nameInput.focus();\n        this.framematerial=new FrameMaterial('','',1,this.selected,1,1,1,'');\n        \n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         \n        } else {\n          this.snackBar.open(err.error.error,\"Alert\",{\n            duration:3000\n          });\n        //   this.framematerial=err.error.data;\n        //   this.nameInput.focus();\n        //   const nameselect=<HTMLInputElement>this.nameSelect.nativeElement;\n        //   setTimeout(function() {  nameselect.select(); }, 50);\n         \n        }\n       \n      }\n\n    }\n    );\n // }\n  }\n}\n","module.exports = \"<!-- <h2 mat-dialog-title>Install Angular</h2> -->\\n\\n    <mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n      <mat-card-title class=\\\"mat-card-title\\\">Edit Frame Material Details</mat-card-title>\\n      <span class=\\\"toolbar-spacer\\\"></span>\\n      <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n    </mat-toolbar>\\n    <form  #editFrameMaterial=\\\"ngForm\\\">\\n      <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n        <mat-spinner></mat-spinner>\\n      </div>\\n    <mat-dialog-content class=\\\"mat-typography\\\">\\n          <div class=\\\"form-group\\\">\\n          <div fxLayout=\\\"column\\\">\\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                  <input matInput [(ngModel)]=\\\"data.name\\\" placeholder=\\\" Flavour Name\\\" name=\\\"name\\\" autofocus>\\n                </mat-form-field>\\n            </div>\\n          \\n          \\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                  <mat-select  placeholder=\\\"Frame Material Model\\\" [(ngModel)]=\\\"data.model\\\" name=\\\"model\\\" required>\\n                      <!-- <mat-option>None</mat-option> -->\\n                      <mat-option *ngFor=\\\"let model of models\\\" [value]=\\\"model\\\">{{model}}</mat-option>\\n                    </mat-select>\\n                  <!-- <input matInput [disabled]=\\\"false\\\" [(ngModel)]=\\\"data.model\\\" [value]=\\\"data.model\\\" placeholder=\\\"Flavour Code\\\" name=\\\"data.code\\\"> -->\\n                </mat-form-field>\\n            </div>\\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput [(ngModel)]=\\\"data.size\\\" placeholder=\\\"Size\\\" name=\\\"size\\\" required>\\n                  </mat-form-field>\\n              </div>\\n              <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                      <input matInput [(ngModel)]=\\\"data.quantity\\\" placeholder=\\\"Quantity\\\" name=\\\"quantity\\\" required>\\n                    </mat-form-field>\\n                </div>\\n                <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput [(ngModel)]=\\\"data.retailerPrice\\\" placeholder=\\\"Retailer Price\\\" name=\\\"retailerPrice\\\" required>\\n                      </mat-form-field>\\n                  </div>\\n                  <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                      <mat-form-field class=\\\"example-full-width\\\">\\n                          <input matInput [(ngModel)]=\\\"data.wholesalerPrice\\\" placeholder=\\\"WholeSaler Price\\\" name=\\\"wholesalerPrice\\\">\\n                        </mat-form-field>\\n                    </div>\\n          </div>\\n       </div>\\n    \\n     \\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"start\\\">\\n    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"editFrameMaterial.invalid\\\" (click)=\\\"onSubmit()\\\" >Save</button>\\n  <button mat-button mat-dialog-close>Cancel</button>\\n  <!-- <button mat-button [mat-dialog-close]=\\\"true\\\" cdkFocusInitial>Install</button> -->\\n  </mat-dialog-actions>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSnackBar } from '@angular/material';\nimport { FrameMaterial } from 'src/app/models/frame-material';\nimport { FrameMaterialModel } from 'src/app/models/enums/frame-material-model';\nimport { FrameMaterialService } from 'src/app/services/frame-material.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-frame-material-edit',\n  templateUrl: './frame-material-edit.component.html',\n  styleUrls: ['./frame-material-edit.component.scss']\n})\nexport class FrameMaterialEditComponent implements OnInit {\n  FrameMaterialModel : typeof FrameMaterialModel = FrameMaterialModel;\n  models : string[];\n  isLoading: boolean = false;\n  constructor( private dialogRef: MatDialogRef<FrameMaterialEditComponent>,private framematerialService:FrameMaterialService,private router:Router,private snackBar:MatSnackBar,@Inject(MAT_DIALOG_DATA) public data: FrameMaterial) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n    var x = FrameMaterialModel;\n    var options = Object.keys(x);\n    this.models = options.slice(options.length / 2);\n  }\n  onSubmit(){\n    this.isLoading = true;\n    this.framematerialService.updateFrameMaterial(this.data).subscribe(\n      ()=>{\n        this.isLoading = false;\n        this.dialogRef.close();\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n              this.router.navigateByUrl('login');\n        }else{\n          this.snackBar.open(\"Updated Failed\",\"Alert\",{\n            duration:4000\n          });\n        }\n      }\n    }\n    );\n  }\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n    <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n      <mat-toolbar class=\\\"form-header\\\">\\n        <h1 class=\\\"mat-headline\\\">Frame Material List</h1>\\n      </mat-toolbar>\\n      <div style=\\\"margin: 10px;\\\">\\n          <button mat-raised-button class=\\\"mat-subheading-2 button-style\\\" routerLink=\\\"add\\\"><mat-icon>add</mat-icon><span style=\\\"margin: 5px;\\\">New</span></button>\\n      </div>\\n<mat-form-field>\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n  \\n  <div class=\\\"mat-elevation-z8\\\" style=\\\"overflow-y:auto\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n  \\n      <!-- ID Column -->\\n      <ng-container matColumnDef=\\\"id\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n        <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i+1}} </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n    \\n      <ng-container matColumnDef=\\\"model\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Model </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.model}} </td>\\n        </ng-container>\\n      <ng-container matColumnDef=\\\"size\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Size </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.size}} </td>\\n      </ng-container>\\n  \\n   \\n      <ng-container matColumnDef=\\\"quantity\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.quantity}} </td>\\n      </ng-container>\\n  \\n\\n      <ng-container matColumnDef=\\\"retailerPrice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Retailer Price </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.retailerPrice}} </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"wholesalerPrice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> WholeSaler Price </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.wholesalerPrice}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"edit\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"editFrameMaterial(element)\\\">edit</mat-icon> </td>\\n      </ng-container>\\n  \\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n      </tr>\\n    </table>\\n  \\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n  </div>\\n  </div>\\n  </div>\"","module.exports = \"\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatPaginator, MatSort, MatTableDataSource, MatDialog} from '@angular/material';\nimport { FrameMaterialService } from 'src/app/services/frame-material.service';\nimport { Router } from '@angular/router';\nimport { FrameMaterial } from 'src/app/models/frame-material';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FrameMaterialEditComponent } from '../frame-material-edit/frame-material-edit.component';\n@Component({\n  selector: 'app-frame-material',\n  templateUrl: './frame-material.component.html',\n  styleUrls: ['./frame-material.component.scss']\n})\nexport class FrameMaterialComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'name','model', 'size', 'quantity','retailerPrice','wholesalerPrice','edit'];\n  // dataSource: MatTableDataSource<FrameMaterial>;\n  public framematerials: Array<FrameMaterial> = [];\n  public dataSource = new MatTableDataSource<FrameMaterial>(this.framematerials);\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  isLoading: boolean = false;\n  constructor(private frameMaterialService:FrameMaterialService,private router:Router,public dialog: MatDialog) {\n    // Create 100 users\n    // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\n\n    // Assign the data to the data source for the table to render\n    \n  }\n\n  ngOnInit() {\n      this.isLoading = true;\n    this.frameMaterialService.getallFrameMaterial().subscribe(\n      (data:Array<FrameMaterial>)=>{\n        this.isLoading = false;\n        this.framematerials=data;\n        this.dataSource = new MatTableDataSource(this.framematerials);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n    \n    )\n    \n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  editFrameMaterial(framematerial:FrameMaterial){\n// console.log(framematerial);\n\nconst dialogRef = this.dialog.open(FrameMaterialEditComponent,{\n  width:\"600px\",\n  data: framematerial\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  // console.log(`Dialog result: ${result}`);\n});\n  }\n}\n\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n    <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n      <mat-toolbar class=\\\"form-header\\\">\\n        <h1 class=\\\"mat-headline\\\">Add Frame Model</h1>\\n      </mat-toolbar>\\n      <div  class=\\\"addmargin\\\" style=\\\"background-color: white;\\\">\\n        <form fxLayout=\\\"column\\\"  class=\\\"example-container\\\" #addFrameMaterial=\\\"ngForm\\\" (submit)=\\\"OnSubmit(myControl)\\\">\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n            <div fxFlex=\\\"20\\\">\\n                <label class=\\\"example-margin\\\">Brand:</label>\\n              </div>\\n              <div fxFlex=\\\"50\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                      <input type=\\\"text\\\" #nameInput=\\\"matInput\\\" #nameSelect placeholder=\\\"Pick Brand one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" name=\\\"brand\\\" [matAutocomplete]=\\\"auto\\\" autofocus required>\\n                      <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\n                        <mat-option (onSelectionChange)=\\\"onSelectionChange($event,option)\\\" *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option.name\\\">\\n                          {{option.name}}\\n                        </mat-option>\\n                      </mat-autocomplete>\\n                    </mat-form-field>\\n                 \\n                    <div *ngIf=\\\"myControl.invalid && (myControl.dirty || myControl.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n                      <div *ngIf=\\\"myControl.errors.required\\\">\\n                        Brand is required.\\n                      </div>\\n                     \\n                    </div>\\n                  </div>\\n               \\n                  </div>\\n                  <span [hidden]=brandhidden>\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                    <div fxFlex=\\\"20\\\">\\n                        <label class=\\\"example-margin\\\">Model:</label>\\n                      </div>\\n                      <div fxFlex=\\\"50\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n    \\n              <input matInput type=\\\"text\\\" placeholder=\\\"Model\\\" [(ngModel)]=\\\"framemodel.model\\\" id=\\\"findModel\\\" (focusout)=\\\"findmodel()\\\"  name=\\\"model\\\" #model=\\\"ngModel\\\" required>\\n        \\n            </mat-form-field>\\n    \\n            <div *ngIf=\\\"model.invalid && (model.dirty || model.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n              <div *ngIf=\\\"model.errors.required\\\">\\n                Model is required.\\n              </div>\\n             \\n            </div>\\n            </div>\\n            </div>\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                    <div fxFlex=\\\"20\\\">\\n                        <label class=\\\"example-margin\\\">FrameType:</label>\\n                      </div>\\n                      <div fxFlex=\\\"50\\\">\\n                        <mat-form-field class=\\\"example-full-width\\\">\\n                          <mat-select  placeholder=\\\"Frame Type\\\" [(ngModel)]=\\\"framemodel.frametype\\\" #frametype=\\\"ngModel\\\" name=\\\"frametype\\\" required>\\n                            <!-- <mat-option>None</mat-option> -->\\n                            <mat-option *ngFor=\\\"let frametype of frametypes\\\" [value]=\\\"frametype\\\">{{frametype}}</mat-option>\\n                          </mat-select>\\n                        </mat-form-field>\\n                        <div *ngIf=\\\"frametype.invalid && (frametype.dirty || frametype.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n            \\n                            <div *ngIf=\\\"frametype.errors.required\\\">\\n                              Frametype is required.\\n                            </div>\\n                           \\n                          </div>\\n                       \\n                          </div>\\n                       \\n                          </div>\\n                 \\n                  <!-- <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                      <div fxFlex=\\\"20\\\">\\n                          <label class=\\\"example-margin\\\">Size:</label>\\n                        </div>\\n                        <div fxFlex=\\\"50\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n      \\n                <input matInput type=\\\"number\\\" placeholder=\\\"Size\\\" [(ngModel)]=\\\"framemodel.size\\\"  name=\\\"size\\\" #size=\\\"ngModel\\\" required>\\n          \\n              </mat-form-field>\\n      \\n              <div *ngIf=\\\"size.invalid && (size.dirty || size.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n                <div *ngIf=\\\"size.errors.required\\\">\\n                    Size is required.\\n                </div>\\n               \\n              </div>\\n              </div>\\n              </div> -->\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Quantity:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n    \\n            <input matInput  type=\\\"number\\\" #QuantitySelect #quantityInput=\\\"matInput\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"framemodel.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n      \\n          </mat-form-field>\\n    \\n          <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n              <div *ngIf=\\\"quantity.errors.required\\\">\\n                  Quantity is required.\\n              </div>\\n              <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                  Quantity is Greater than Zero.\\n              </div>\\n              <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                  Quantity Rate is Not Valid.\\n              </div>\\n            </div>\\n            \\n          </div>\\n          </div>\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Price:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n                      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"20px\\\" fxLayout.xs=\\\"column\\\">\\n                        <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n  \\n            <input matInput type=\\\"number\\\" #retailerpriceSelect #retailerpriceInput=\\\"matInput\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"framemodel.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n      \\n          </mat-form-field>\\n          <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n              <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                  Retailer Price is required.\\n              </div>\\n              <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                  Retailer Price is Greater than Zero.\\n              </div>\\n              <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                  RetailerPrice Rate is Not Valid .\\n              </div>\\n            </div>\\n          </div>\\n          <div fxFlex=\\\"50\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n  \\n              <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"framemodel.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n        \\n            </mat-form-field>\\n            </div>\\n         \\n          </div>\\n        </div>\\n          </div>\\n         \\n     \\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n      <div fxFlex=\\\"20\\\"></div>\\n      <div fxFlex=\\\"50\\\">\\n<button mat-raised-button class=\\\"mat-subheading-2 button-style example-full-width\\\" type=\\\"submit\\\" [(disabled)]=\\\"addFrameMaterial.invalid || myControl.invalid\\\">Save</button>\\n    </div>\\n  </div>\\n</span>\\n              </form>\\n              </div>\\n\\n  </div>\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { BrandService } from 'src/app/services/brand.service';\nimport { Brand } from 'src/app/models/brand';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { FrameModel } from 'src/app/models/frame-model';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport { FrameType } from 'src/app/models/enums/frame-type';\nimport { MatSnackBar, MatInput } from '@angular/material';\nimport { FrameModelService } from 'src/app/services/frame-model.service';\nimport { Admin } from 'src/app/models/admin';\nimport { LoginService } from 'src/app/services/login.service';\n@Component({\n  selector: 'app-frame-model-add',\n  templateUrl: './frame-model-add.component.html',\n  styleUrls: ['./frame-model-add.component.scss']\n})\nexport class FrameModelAddComponent implements OnInit {\n brands: Array<Brand> = [];\n brand:Brand = null;\n FrameType : typeof FrameType = FrameType;\n framemodel:FrameModel=new FrameModel('',this.brand,'','',1,1,1,1,'');\n myControl = new FormControl();\n frametypes : string[];\n brandhidden:boolean=true;\n @ViewChild('nameInput') nameInput: MatInput;\n@ViewChild('nameSelect') nameSelect: ElementRef;\n//  options: string[] = ['One', 'Two', 'Three'];\n filteredOptions: Observable<Brand[]>;\n isLoading: boolean = false;\n  constructor(private brandService:BrandService,private loginservice:LoginService,private framemodelService:FrameModelService,private router:Router,private snackBar:MatSnackBar ) { }\n\n  ngOnInit() {\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n        this.router.navigateByUrl('login');\n      }\n      });\n    var x = FrameType;\n    var options = Object.keys(x);\n    this.frametypes = options.slice(options.length / 2);\n    this.framemodel.frametype=this.frametypes[0];\n    this.isLoading = true;\n    this.brandService.getallBrand().subscribe(\n      (data:Array<Brand>)=>{\n          this.isLoading = false;\n        this.brands=data;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n  );\n  this.filteredOptions = this.myControl.valueChanges.pipe(\n    startWith(''),\n    map(value => this._filter(value))\n  );\n  }\n  private _filter(value: string): Brand[] {\n    const filterValue = value.toLowerCase();\n      return this.brands.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n  onSelectionChange(event,brand:Brand){\n    if(event.isUserInput){\n      this.framemodel.brand=brand;\n      this.brandhidden=false;\n    }\n     \n    \n  }\n  findmodel(){\n    // var x =(<HTMLInputElement>(document.getElementById(\"findModel\")));\n    // x.value =x.value,\n    this.framemodelService.findByModel(this.framemodel.model,this.framemodel.brand.uuid)\n    .subscribe((framemodel: FrameModel) => {\n      if (framemodel) {\n        this.framemodel=framemodel;\n        this.framemodel.fk_companyid=\"\";\n        this.framemodel.uuid=\"\";\n         // this.framemodel = new FrameModel('',this.brand,'','',1,1,1,1,'');\n      }\n    });\n   }\n  OnSubmit(myControl){\n      this.isLoading = true;\nthis.framemodelService.addFrameModel(this.framemodel).subscribe(\n      (data)=>{\n          this.isLoading = false;\n        this.snackBar.open(\"Frame Model Added\",\"Success\",{\n          duration:4000\n        });\n        this.nameInput.focus();\n        this.brandhidden=true;\n        this.framemodel=new FrameModel('',this.brand,'','',1,1,1,1,'');\n        var x = FrameType;\n        var options = Object.keys(x);\n        this.frametypes = options.slice(options.length / 2);\n        this.framemodel.frametype=this.frametypes[0];\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         \n        }else {\n          this.snackBar.open(err.error.error,\"Alert\",{\n            duration:3000\n          });\n        //   this.framemodel=err.error.data;\n        //   this.myControl.setValue(this.framemodel.brand.name);\n        //   this.nameInput.focus();\n        //   const nameselect=<HTMLInputElement>this.nameSelect.nativeElement;\n        //   setTimeout(function() {  nameselect.select(); }, 50);\n         \n         \n        }\n       \n      }\n\n    }\n    );\n  }\n}\n","module.exports = \"\\n\\n<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n  <mat-card-title class=\\\"mat-card-title\\\">Edit Frame Model Details</mat-card-title>\\n  <span class=\\\"toolbar-spacer\\\"></span>\\n  <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n</mat-toolbar>\\n<form  #editFrameModel=\\\"ngForm\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n<mat-dialog-content class=\\\"mat-typography\\\">\\n      <div class=\\\"form-group\\\">\\n      <div fxLayout=\\\"column\\\">\\n        <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input type=\\\"text\\\" #nameInput=\\\"matInput\\\" #nameSelect placeholder=\\\"Brand Name\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" name=\\\"brand\\\" [matAutocomplete]=\\\"auto\\\" autofocus required>\\n            <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\n              <mat-option (onSelectionChange)=\\\"onSelectionChange($event,option)\\\" *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option.name\\\">\\n                {{option.name}}\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n       \\n          <div *ngIf=\\\"myControl.invalid && (myControl.dirty || myControl.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n\\n            <div *ngIf=\\\"myControl.errors.required\\\">\\n              Brand is required.\\n            </div>\\n           \\n          </div>\\n        </div>\\n      \\n      \\n        <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n    \\n            <input matInput type=\\\"text\\\" placeholder=\\\"Model\\\" [(ngModel)]=\\\"data.model\\\"  name=\\\"model\\\" #model=\\\"ngModel\\\" required>\\n      \\n          </mat-form-field>\\n  \\n          <div *ngIf=\\\"model.invalid && (model.dirty || model.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n            <div *ngIf=\\\"model.errors.required\\\">\\n              Model is required.\\n            </div>\\n           \\n          </div>\\n        </div>\\n        <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <mat-select  placeholder=\\\"Frame Type\\\" [(ngModel)]=\\\"data.frametype\\\" #frametype=\\\"ngModel\\\" name=\\\"frametype\\\" required>\\n              <!-- <mat-option>None</mat-option> -->\\n              <mat-option *ngFor=\\\"let frametype of frametypes\\\" [value]=\\\"frametype\\\">{{frametype}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n          <div *ngIf=\\\"frametype.invalid && (frametype.dirty || frametype.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n\\n              <div *ngIf=\\\"frametype.errors.required\\\">\\n                Frametype is required.\\n              </div>\\n             \\n            </div>\\n          </div>\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n    \\n              <input matInput  type=\\\"number\\\" #QuantitySelect #quantityInput=\\\"matInput\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n        \\n            </mat-form-field>\\n      \\n            <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n        \\n                <div *ngIf=\\\"quantity.errors.required\\\">\\n                    Quantity is required.\\n                </div>\\n                <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                    Quantity is Greater than Zero.\\n                </div>\\n                <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                    Quantity Rate is Not Valid.\\n                </div>\\n              </div>\\n            </div>\\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n  \\n                <input matInput type=\\\"number\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n          \\n              </mat-form-field>\\n              <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n          \\n                  <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                      Retailer Price is required.\\n                  </div>\\n                  <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                      Retailer Price is Greater than Zero.\\n                  </div>\\n                  <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                      RetailerPrice Rate is Not Valid .\\n                  </div>\\n                </div>\\n              </div>\\n              <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                <mat-form-field class=\\\"example-full-width\\\">\\n  \\n                  <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"data.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n            \\n                </mat-form-field>\\n                </div>\\n      </div>\\n   </div>\\n\\n \\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"start\\\">\\n<button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"editFrameModel.invalid || myControl.invalid\\\" (click)=\\\"onSubmit()\\\" >Save</button>\\n<button mat-button mat-dialog-close>Cancel</button>\\n<!-- <button mat-button [mat-dialog-close]=\\\"true\\\" cdkFocusInitial>Install</button> -->\\n</mat-dialog-actions>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatSnackBar, MatDialogRef } from '@angular/material';\nimport { FrameModel } from 'src/app/models/frame-model';\nimport { Router } from '@angular/router';\nimport { FrameModelService } from 'src/app/services/frame-model.service';\nimport { Brand } from 'src/app/models/brand';\nimport { FrameType } from 'src/app/models/enums/frame-type';\nimport { FormControl } from '@angular/forms';\nimport { BrandService } from 'src/app/services/brand.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n@Component({\n  selector: 'app-frame-model-edit',\n  templateUrl: './frame-model-edit.component.html',\n  styleUrls: ['./frame-model-edit.component.scss']\n})\nexport class FrameModelEditComponent implements OnInit {\n  brands: Array<Brand> = [];\n  brand:Brand;\n  FrameType : typeof FrameType = FrameType;\n  myControl = new FormControl();\n  frametypes : string[];\n  filteredOptions: Observable<Brand[]>;\n  isLoading: boolean = false;\n  constructor( private dialogRef: MatDialogRef<FrameModelEditComponent>,private framemodelService:FrameModelService,private brandService:BrandService,private router:Router,private snackBar:MatSnackBar,@Inject(MAT_DIALOG_DATA) public data: FrameModel) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n    var x = FrameType;\n    var options = Object.keys(x);\n    this.frametypes = options.slice(options.length / 2);\n    this.isLoading = true;\n    this.brandService.getallBrand().subscribe(\n      (data:Array<Brand>)=>{\n          this.isLoading = false;\n        this.brands=data;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n  );\n  this.filteredOptions = this.myControl.valueChanges.pipe(\n    startWith(''),\n    map(value => this._filter(value))\n  );\n  this.myControl.setValue(this.data.brand.name);\n  }\n  private _filter(value: string): Brand[] {\n    const filterValue = value.toLowerCase();\n      return this.brands.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n  onSelectionChange(event,brand:Brand){\n    if(event.isUserInput){\n      this.data.brand=brand;\n    }\n     }\n    \n     onSubmit(){\n        this.isLoading = true;\n      this.framemodelService.updateFrameModel(this.data).subscribe(\n        ()=>{\n            this.isLoading = false;\n          this.dialogRef.close();\n      },\n      (err)=>{\n        if(err instanceof HttpErrorResponse){\n            this.isLoading = false;\n          if(err.status===401){\n                this.router.navigateByUrl('login');\n          }else{\n            this.snackBar.open(err.error.error, \"Alert\", {\n              duration:4000\n            });\n          }\n        }\n      }\n      );\n     }\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n  <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n    <mat-toolbar class=\\\"form-header\\\">\\n      <h1 class=\\\"mat-headline\\\">Frame Model List</h1>\\n    </mat-toolbar>\\n    <div style=\\\"margin: 10px;\\\">\\n        <button mat-raised-button [hidden]=\\\"addHidden\\\" class=\\\"mat-subheading-2 button-style\\\" routerLink=\\\"add\\\"><mat-icon>add</mat-icon><span style=\\\"margin: 5px;\\\">New</span></button>\\n    </div>\\n<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<div class=\\\"mat-elevation-z8\\\" style=\\\"overflow-y:auto\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i+1}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"brand\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Brand </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.brand.name}} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"model\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Model </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.model}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"frametype\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> FrameType </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.frametype}} </td>\\n      </ng-container>\\n    <!-- <ng-container matColumnDef=\\\"size\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Size </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.size}} </td>\\n    </ng-container> -->\\n    \\n \\n    <ng-container matColumnDef=\\\"quantity\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.quantity}} </td>\\n    </ng-container>\\n\\n\\n    <ng-container matColumnDef=\\\"retailerPrice\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Retailer Price </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.retailerPrice | currency:'INR'}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"wholesalerPrice\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> WholeSaler Price </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.wholesalerPrice | currency:'INR'}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"edit\\\">\\n      <th mat-header-cell *matHeaderCellDef [hidden]=\\\"editHidden\\\"> </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" [hidden]=\\\"editHidden\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"editFrameModel(element)\\\">edit</mat-icon> </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n    </tr>\\n  </table>\\n\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n</div>\\n</div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FrameModel } from 'src/app/models/frame-model';\nimport { FrameModelEditComponent } from '../frame-model-edit/frame-model-edit.component';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatTableDataSource, MatPaginator, MatSort, MatDialog } from '@angular/material';\nimport { FrameModelService } from 'src/app/services/frame-model.service';\nimport { Router } from '@angular/router';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Admin } from 'src/app/models/admin';\n\n@Component({\n  selector: 'app-frame-model',\n  templateUrl: './frame-model.component.html',\n  styleUrls: ['./frame-model.component.scss']\n})\nexport class FrameModelComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'brand','model','frametype', 'quantity','retailerPrice','wholesalerPrice','edit'];\n  public framemodels: Array<FrameModel> = [];\n  editHidden:boolean=false;\n  addHidden:boolean=false;\n   dataSource : MatTableDataSource<FrameModel>;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n    isLoading: boolean = false;\n  constructor(private frameModelService:FrameModelService,private loginservice:LoginService,private router:Router,public dialog: MatDialog) {\n    \n    \n  }\n\n  ngOnInit() {\n      this.isLoading = true;\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n       this.editHidden=true;\n       this.addHidden=true;\n      }\n      });\n    this.frameModelService.getallFrameModel().subscribe(\n      (data:Array<FrameModel>)=>{\n          this.isLoading = false;\n        this.framemodels=data;\n        this.dataSource = new MatTableDataSource(this.framemodels);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n          this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n    \n    )\n    \n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n      }\n  }\n  editFrameModel(framemodel:FrameModel){\n\nconst dialogRef = this.dialog.open(FrameModelEditComponent,{\n  width:\"600px\",\n  data: framemodel\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  // console.log(`Dialog result: ${result}`);\n});\n  }\n\n}\n","module.exports = \"<p>\\n  frame-type-add works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-frame-type-add',\n  templateUrl: './frame-type-add.component.html',\n  styleUrls: ['./frame-type-add.component.scss']\n})\nexport class FrameTypeAddComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<!-- <h2 mat-dialog-title>Install Angular</h2> -->\\n\\n<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n    <mat-card-title class=\\\"mat-card-title\\\">Edit Frame Type Details</mat-card-title>\\n    <span class=\\\"toolbar-spacer\\\"></span>\\n    <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n  </mat-toolbar>\\n<mat-dialog-content class=\\\"mat-typography\\\">\\n  <form (submit)=\\\"onSubmit()\\\">\\n      <div class=\\\"form-group\\\">\\n        <div fxLayout=\\\"column\\\">\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput [disabled]=\\\"false\\\" [(ngModel)]=\\\"data.name\\\" [value]=\\\"data.name\\\" placeholder=\\\" Flavour Name\\\" name=\\\"data.name\\\" autofocus>\\n              </mat-form-field>\\n          </div>\\n        \\n        \\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput [disabled]=\\\"false\\\" [(ngModel)]=\\\"data.model\\\" [value]=\\\"data.model\\\" placeholder=\\\"Flavour Code\\\" name=\\\"data.code\\\">\\n              </mat-form-field>\\n          </div>\\n        </div>\\n     </div>\\n  \\n    </form>\\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"start\\\">\\n  <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\">Save</button>\\n<button mat-button mat-dialog-close>Cancel</button>\\n</mat-dialog-actions>\\n\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { FrameType } from 'src/app/models/frame-type';\n\n@Component({\n  selector: 'app-frame-type-edit',\n  templateUrl: './frame-type-edit.component.html',\n  styleUrls: ['./frame-type-edit.component.scss']\n})\nexport class FrameTypeEditComponent implements OnInit {\n\n  constructor( private dialogRef: MatDialogRef<FrameTypeEditComponent>,@Inject(MAT_DIALOG_DATA) public data: FrameType) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n  }\n  onSubmit(){\n    console.log(this.data);\n  }\n\n}\n","module.exports = \"<p>\\n  frame-type works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-frame-type',\n  templateUrl: './frame-type.component.html',\n  styleUrls: ['./frame-type.component.scss']\n})\nexport class FrameTypeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n   \n  }\n\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n  <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n    <mat-toolbar class=\\\"form-header\\\">\\n      <h1 class=\\\"mat-headline\\\">Add Lens Type</h1>\\n    </mat-toolbar>\\n    <div  class=\\\"addmargin\\\" style=\\\"background-color: white;\\\">\\n      <form fxLayout=\\\"column\\\"  class=\\\"example-container\\\" #addLensType=\\\"ngForm\\\"  (submit)=\\\"OnSubmit()\\\" >\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n          <div fxFlex=\\\"20\\\">\\n              <label class=\\\"example-margin\\\">Power LensType:</label>\\n            </div>\\n            <div fxFlex=\\\"50\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <mat-select  placeholder=\\\"Power LensType\\\" #powerlensInput [(ngModel)]=\\\"lenstype.powerlenstype\\\" #powerlenstype=\\\"ngModel\\\" name=\\\"powerlenstype\\\" required>\\n                  <!-- <mat-option>None</mat-option> -->\\n                  <mat-option *ngFor=\\\"let powerlens of powerlenstypes\\\" [value]=\\\"powerlens\\\">{{powerlens}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n              <div *ngIf=\\\"powerlenstype.invalid && (powerlenstype.dirty || powerlenstype.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n                  <div *ngIf=\\\"powerlenstype.errors.required\\\">\\n                    PowerLensType is required.\\n                  </div>\\n                 \\n                </div>\\n             \\n                </div>\\n             \\n                </div>\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" >\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">Name:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n  \\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"lenstype.name\\\" (focusout)=\\\"findname()\\\"  name=\\\"name\\\" #name=\\\"ngModel\\\" required>\\n      \\n          </mat-form-field>\\n  \\n          <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n            <div *ngIf=\\\"name.errors.required\\\">\\n              Name is required.\\n            </div>\\n           \\n          </div>\\n          </div>\\n          </div>\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                  <div fxFlex=\\\"20\\\">\\n                      <label class=\\\"example-margin\\\">LensMaterial:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n                      <mat-radio-group [(ngModel)]=\\\"lenstype.lensmaterial\\\" name=\\\"lensmaterial\\\" #lensmaterial=\\\"ngModel\\\" required>\\n                  <mat-radio-button class=\\\"example-radio-button\\\"  value=\\\"Fiber\\\">Fiber</mat-radio-button>\\n                  <mat-radio-button class=\\\"example-radio-button\\\"  value=\\\"Glasses\\\">Glasses</mat-radio-button>\\n                </mat-radio-group>\\n                      \\n                      <div *ngIf=\\\"lensmaterial.invalid && (lensmaterial.dirty || lensmaterial.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n          \\n                          <div *ngIf=\\\"lensmaterial.errors.required\\\">\\n                            Lens Material is required.\\n                          </div>\\n                         \\n                        </div>\\n                     \\n                        </div>\\n                     \\n                        </div>\\n               \\n                \\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                <div fxFlex=\\\"20\\\">\\n                    <label class=\\\"example-margin\\\">Quantity:</label>\\n                  </div>\\n                  <div fxFlex=\\\"50\\\">\\n      <mat-form-field class=\\\"example-full-width\\\">\\n  \\n          <input matInput  type=\\\"number\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"lenstype.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n    \\n        </mat-form-field>\\n  \\n        <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n            <div *ngIf=\\\"quantity.errors.required\\\">\\n                Quantity is required.\\n            </div>\\n            <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                Quantity is Greater than Zero.\\n            </div>\\n            <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                Quantity Rate is Not Valid.\\n            </div>\\n          </div>\\n          \\n        </div>\\n        </div>\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n                <div fxFlex=\\\"20\\\">\\n                    <label class=\\\"example-margin\\\">Price:</label>\\n                  </div>\\n                  <div fxFlex=\\\"50\\\">\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"20px\\\" fxLayout.xs=\\\"column\\\">\\n                      <div fxFlex=\\\"50\\\">\\n      <mat-form-field class=\\\"example-full-width\\\">\\n\\n          <input matInput type=\\\"number\\\" #retailerpriceSelect #retailerpriceInput=\\\"matInput\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"lenstype.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n    \\n        </mat-form-field>\\n        <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n    \\n            <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                Retailer Price is required.\\n            </div>\\n            <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                Retailer Price is Greater than Zero.\\n            </div>\\n            <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                Retailer Price Rate is Not Valid .\\n            </div>\\n          </div>\\n        </div>\\n        <div fxFlex=\\\"50\\\">\\n        <mat-form-field class=\\\"example-full-width\\\">\\n\\n            <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"lenstype.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n      \\n          </mat-form-field>\\n          </div>\\n       \\n        </div>\\n      </div>\\n        </div>\\n       \\n   \\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n    <div fxFlex=\\\"20\\\"></div>\\n    <div fxFlex=\\\"50\\\">\\n<button mat-raised-button class=\\\"mat-subheading-2 button-style example-full-width\\\" type=\\\"submit\\\" [(disabled)]=\\\"addLensType.invalid\\\">Save</button>\\n  </div>\\n</div>\\n            </form>\\n            </div>\\n\\n</div>\\n\"","module.exports = \".example-radio-button {\\n  margin-top: 18px; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { PowerLensType } from 'src/app/models/enums/power-lens-type';\nimport { LensTypeService } from 'src/app/services/lens-type.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar, MatInput } from '@angular/material';\nimport { LensType } from 'src/app/models/lens-type';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Admin } from 'src/app/models/admin';\n\n@Component({\n  selector: 'app-lens-type-add',\n  templateUrl: './lens-type-add.component.html',\n  styleUrls: ['./lens-type-add.component.scss']\n})\nexport class LensTypeAddComponent implements OnInit {\n  PowerLensType : typeof PowerLensType = PowerLensType;\n  powerlenstypes : string[];\n  lenstype:LensType=new LensType('','','','',1,1,1,'');\n  @ViewChild('powerlensInput') powerlensInput: MatInput;\n  isLoading: boolean = false;\n  constructor(private lenstypeService:LensTypeService,private loginservice:LoginService,private router:Router,private snackBar:MatSnackBar) { }\n\n  ngOnInit() {\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n        this.router.navigateByUrl('login');\n      }\n      });\n    var x = PowerLensType;\n    var options = Object.keys(x);\n    this.powerlenstypes = options.slice(options.length / 2);\n    this.lenstype.powerlenstype=this.powerlenstypes[0];\n    this.lenstype.lensmaterial=\"Fiber\";\n  }\n  findname(){\n\n    this.lenstypeService.findByName(this.lenstype.powerlenstype,this.lenstype.name)\n    .subscribe((lenstype: LensType) => {\n      if (lenstype) {\n        this.lenstype=lenstype;\n        this.lenstype.fk_companyid=\"\";\n        this.lenstype.uuid=\"\";\n      }\n    });\n  }\n  OnSubmit(){\n      this.isLoading = true;\n    this.lenstypeService.addLensType(this.lenstype).subscribe(\n      (data)=>{\n          this.isLoading = false;\n    this.snackBar.open(\"LensType Added\",\"Success\",{\n    duration:4000\n    });\n    this.powerlensInput.focus();\n    this.lenstype=new LensType('','','','',1,1,1,'');\n    var x = PowerLensType;\n    var options = Object.keys(x);\n    this.powerlenstypes = options.slice(options.length / 2);\n    this.lenstype.powerlenstype=this.powerlenstypes[0];\n    this.lenstype.lensmaterial=\"Fiber\";\n    },\n    \n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n          this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         \n        }else {\n          this.snackBar.open(err.error.error,\"Alert\",{\n            duration:3000\n          });\n        //   this.lenstype=err.error.data;\n        //   this.powerlensInput.focus();\n          // const nameselect=<HTMLInputElement>this.nameSelect.nativeElement;\n          // setTimeout(function() {  nameselect.select(); }, 50);\n         \n         \n        }\n       \n      }\n    });\n  }\n}\n","module.exports = \"\\n\\n<mat-toolbar color=\\\"primary\\\" class=\\\"toolbar\\\">\\n    <mat-card-title class=\\\"mat-card-title\\\">Edit Lens Type Details</mat-card-title>\\n    <span class=\\\"toolbar-spacer\\\"></span>\\n    <mat-icon (click)=\\\"onNoClick()\\\" class=\\\"cursor\\\">cancel</mat-icon>\\n  </mat-toolbar>\\n  <form  #editlenstype=\\\"ngForm\\\">\\n    <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n      <mat-spinner></mat-spinner>\\n    </div>\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\n        <div class=\\\"form-group\\\">\\n        <div fxLayout=\\\"column\\\">\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <mat-select  placeholder=\\\"Power LensType\\\" #powerlensInput [(ngModel)]=\\\"data.powerlenstype\\\" #powerlenstype=\\\"ngModel\\\" name=\\\"powerlenstype\\\" required>\\n                  <mat-option *ngFor=\\\"let powerlens of powerlenstypes\\\" [value]=\\\"powerlens\\\">{{powerlens}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n              <div *ngIf=\\\"powerlenstype.invalid && (powerlenstype.dirty || powerlenstype.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n  \\n                  <div *ngIf=\\\"powerlenstype.errors.required\\\">\\n                    PowerLensType is required.\\n                  </div>\\n                 \\n                </div>\\n          </div>\\n        \\n        \\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n  \\n                <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"data.name\\\" (focusout)=\\\"findname()\\\"  name=\\\"name\\\" #name=\\\"ngModel\\\" required>\\n          \\n              </mat-form-field>\\n      \\n              <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n      \\n                <div *ngIf=\\\"name.errors.required\\\">\\n                  Name is required.\\n                </div>\\n               \\n              </div>\\n          </div>\\n          <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\">\\n                <div fxFlex=\\\"20\\\">\\n                        <label style=\\\"margin-left: 10px; color: #9a9797;\\\">Lens Material:</label>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n            <mat-radio-group [(ngModel)]=\\\"data.lensmaterial\\\" name=\\\"lensmaterial\\\" #lensmaterial=\\\"ngModel\\\" required>\\n                <mat-radio-button class=\\\"example-radio-button\\\"  value=\\\"Fiber\\\">Fiber</mat-radio-button>\\n                <mat-radio-button class=\\\"example-radio-button\\\"  value=\\\"Glasses\\\">Glasses</mat-radio-button>\\n              </mat-radio-group>\\n                    \\n                    <div *ngIf=\\\"lensmaterial.invalid && (lensmaterial.dirty || lensmaterial.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n        \\n                        <div *ngIf=\\\"lensmaterial.errors.required\\\">\\n                          Lens Material is required.\\n                        </div>\\n                       \\n                      </div>\\n                    </div>\\n                    </div>\\n            </div>\\n            <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n      \\n                <input matInput  type=\\\"number\\\" placeholder=\\\"Quantity\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.quantity\\\" name=\\\"quantity\\\" #quantity=\\\"ngModel\\\" minlength=\\\"10\\\" required>\\n          \\n              </mat-form-field>\\n        \\n              <div *ngIf=\\\"quantity.invalid && (quantity.dirty || quantity.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n          \\n                  <div *ngIf=\\\"quantity.errors.required\\\">\\n                      Quantity is required.\\n                  </div>\\n                  <div *ngIf=\\\"quantity.errors.minlength\\\">\\n                      Quantity is Greater than Zero.\\n                  </div>\\n                  <div *ngIf=\\\"quantity.errors.pattern\\\">\\n                      Quantity Rate is Not Valid.\\n                  </div>\\n                </div>\\n              </div>\\n              <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                <mat-form-field class=\\\"example-full-width\\\">\\n    \\n                  <input matInput type=\\\"number\\\" placeholder=\\\"Retailer Price\\\" pattern=\\\"[0-9]*\\\" [(ngModel)]=\\\"data.retailerPrice\\\" name=\\\"retailerPrice\\\" #retailerPrice=\\\"ngModel\\\" required minlength=\\\"10\\\">\\n            \\n                </mat-form-field>\\n                <div *ngIf=\\\"retailerPrice.invalid && (retailerPrice.dirty || retailerPrice.touched)\\\" class=\\\"mat-body-1 center-align\\\">\\n            \\n                    <div *ngIf=\\\"retailerPrice.errors.required\\\">\\n                        Retailer Price is required.\\n                    </div>\\n                    <div *ngIf=\\\"retailerPrice.errors.minlength\\\">\\n                        Retailer Price is Greater than Zero.\\n                    </div>\\n                    <div *ngIf=\\\"retailerPrice.errors.pattern\\\">\\n                        RetailerPrice Rate is Not Valid .\\n                    </div>\\n                  </div>\\n                </div>\\n                <div fxFlex=\\\"100\\\" style=\\\"margin-bottom: 10px;\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n    \\n                    <input matInput type=\\\"number\\\" placeholder=\\\"WholeSaler Price\\\" [(ngModel)]=\\\"data.wholesalerPrice\\\"  name=\\\"wholesalerPrice\\\">\\n              \\n                  </mat-form-field>\\n                  </div>\\n        </div>\\n     </div>\\n  \\n   \\n  </mat-dialog-content>\\n  <mat-dialog-actions align=\\\"start\\\">\\n  <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"editlenstype.invalid\\\" (click)=\\\"onSubmit()\\\" >Save</button>\\n  <button mat-button mat-dialog-close>Cancel</button>\\n  <!-- <button mat-button [mat-dialog-close]=\\\"true\\\" cdkFocusInitial>Install</button> -->\\n  </mat-dialog-actions>\\n  </form>\"","module.exports = \".example-radio-button {\\n  margin-right: 10px; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatSnackBar } from '@angular/material';\nimport { LensType } from 'src/app/models/lens-type';\nimport { PowerLensType } from 'src/app/models/enums/power-lens-type';\nimport { LensTypeService } from 'src/app/services/lens-type.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-lens-type-edit',\n  templateUrl: './lens-type-edit.component.html',\n  styleUrls: ['./lens-type-edit.component.scss']\n})\nexport class LensTypeEditComponent implements OnInit {\n  PowerLensType : typeof PowerLensType = PowerLensType;\n  powerlenstypes : string[];\n  isLoading: boolean = false;\n  constructor( private dialogRef: MatDialogRef<LensTypeEditComponent>, private lenstypeService:LensTypeService,private router:Router,private snackBar:MatSnackBar,@Inject(MAT_DIALOG_DATA) public data: LensType) { }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  ngOnInit() {\n    var x = PowerLensType;\n    var options = Object.keys(x);\n    this.powerlenstypes = options.slice(options.length / 2);\n  }\n  onSubmit(){\n      this.isLoading = true;\n    this.lenstypeService.updateLensType(this.data).subscribe(\n      ()=>{\n          this.isLoading = false;\n        this.dialogRef.close();\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n        this.isLoading = false;\n        if(err.status===401){\n              this.router.navigateByUrl('login');\n        }else{\n          this.snackBar.open(err.error.error,\"Alert\",{\n            duration:4000\n          });\n        }\n      }\n    }\n    );\n  }\n\n}\n","module.exports = \"<div fxLayout=\\\"column\\\"  class=\\\"components-container-gt-xs\\\"  [ngClass.xs]=\\\"'components-container-xs'\\\"  fxLayoutGap=\\\"20px\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoading\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n  <div fxFlex class=\\\"form-component-holder mat-elevation-z4\\\">\\n    <mat-toolbar class=\\\"form-header\\\">\\n      <h1 class=\\\"mat-headline\\\">LensType List</h1>\\n    </mat-toolbar>\\n    <div style=\\\"margin: 10px;\\\">\\n        <button mat-raised-button [hidden]=\\\"addHidden\\\" class=\\\"mat-subheading-2 button-style\\\" routerLink=\\\"add\\\"><mat-icon>add</mat-icon><span style=\\\"margin: 5px;\\\">New</span></button>\\n    </div>\\n<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<div class=\\\"mat-elevation-z8\\\" style=\\\"overflow-y:auto\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef> ID </th>\\n      <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i+1}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"powerlens\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> PowerLensType </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.powerlenstype}} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"lensmaterial\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> LensMaterial </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lensmaterial}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"quantity\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.quantity}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"retailerprice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> RetailerPrice </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.retailerPrice | currency:'INR' }} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"wholesalerprice\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> WholesalerPrice </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.wholesalerPrice | currency:'INR'}} </td>\\n      </ng-container>\\n    <ng-container matColumnDef=\\\"edit\\\">\\n      <th mat-header-cell *matHeaderCellDef [hidden]=\\\"editHidden\\\"> </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" [hidden]=\\\"editHidden\\\"><mat-icon class=\\\"cursor\\\" (click)=\\\"editlensType(element)\\\">edit</mat-icon> </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n    </tr>\\n  </table>\\n\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n</div>\\n</div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LensType } from 'src/app/models/lens-type';\nimport { MatPaginator, MatTableDataSource, MatSort, MatDialog } from '@angular/material';\nimport { LensTypeService } from 'src/app/services/lens-type.service';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { LensTypeEditComponent } from '../lens-type-edit/lens-type-edit.component';\nimport { Admin } from 'src/app/models/admin';\nimport { LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-lens-type',\n  templateUrl: './lens-type.component.html',\n  styleUrls: ['./lens-type.component.scss']\n})\nexport class LensTypeComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'powerlens','name','lensmaterial','quantity','retailerprice','wholesalerprice','edit'];\n  public lenstypes: Array<LensType> = [];\n  editHidden:boolean=false;\n  addHidden:boolean=false;\n  public dataSource = new MatTableDataSource<LensType>(this.lenstypes);\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  isLoading: boolean = false;\n  constructor(private lenstypeService:LensTypeService,private loginservice:LoginService,private router:Router,public dialog: MatDialog) {\n    \n  }\n\n  ngOnInit(){\n      this.isLoading = true;\n    this.loginservice.getUserName().subscribe((data:Admin)=>{\n      if(data.Identifier===\"employee\"){\n       this.editHidden=true;\n       this.addHidden=true;\n      }\n      });\n    this.lenstypeService.getallLensType().subscribe(\n      (data:Array<LensType>)=>{\n          this.isLoading = false;\n        this.lenstypes=data;\n        this.dataSource = new MatTableDataSource(this.lenstypes);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    },\n    (err)=>{\n      if(err instanceof HttpErrorResponse){\n          this.isLoading = false;\n        if(err.status===401){\n          this.router.navigateByUrl('login');\n         }\n      }\n    }\n    \n    )\n    \n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  editlensType(lenstype:LensType){\nconst dialogRef = this.dialog.open(LensTypeEditComponent,{\n  width:\"600px\",\n  data: lenstype\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  // console.log(`Dialog result: ${result}`);\n});\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProductRouterModule } from './products.router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n\t\t\tMatButtonModule,\n\t\t\tMatToolbarModule,\n\t\t\tMatCardModule,\n\t\t\tMatTabsModule,\n\t\t\tMatIconModule,\n\t\t\tMatNativeDateModule,\n\t\t\tMatDatepickerModule\n\t\t} from '@angular/material';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatSelectModule} from '@angular/material/select';\nimport { MatInputModule } from '@angular/material';\nimport {MatPaginatorModule} from '@angular/material';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {  ReactiveFormsModule } from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\nimport { FormsModule }   from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { FrameMaterialComponent } from './glasses/frame-material/frame-material.component';\nimport { FrameTypeComponent } from './glasses/frame-type/frame-type.component';\nimport { LensTypeComponent } from './glasses/lens-type/lens-type.component';\nimport { BoxModelComponent } from './boxes/box-model/box-model.component';\nimport {MatSortModule} from '@angular/material/sort';\nimport { BoxModelAddComponent } from './boxes/box-model-add/box-model-add.component';\nimport { BoxModelEditComponent } from './boxes/box-model-edit/box-model-edit.component';\nimport { LensTypeAddComponent } from './glasses/lens-type-add/lens-type-add.component';\nimport { LensTypeEditComponent } from './glasses/lens-type-edit/lens-type-edit.component';\nimport { FrameMaterialAddComponent } from './glasses/frame-material-add/frame-material-add.component';\nimport { FrameMaterialEditComponent } from './glasses/frame-material-edit/frame-material-edit.component';\nimport { FrameTypeAddComponent } from './glasses/frame-type-add/frame-type-add.component';\nimport { FrameTypeEditComponent } from './glasses/frame-type-edit/frame-type-edit.component';\nimport { FrameMaterialService } from '../services/frame-material.service';\nimport { FrameModelComponent } from './glasses/frame-model/frame-model.component';\nimport { FrameModelAddComponent } from './glasses/frame-model-add/frame-model-add.component';\nimport { FrameModelEditComponent } from './glasses/frame-model-edit/frame-model-edit.component';\nimport { BrandComponent } from './brands/brand/brand.component';\nimport { BrandAddComponent } from './brands/brand-add/brand-add.component';\nimport { BrandEditComponent } from './brands/brand-edit/brand-edit.component';\nimport { LensTypeService } from '../services/lens-type.service';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tProductRouterModule,\n\t\tFlexLayoutModule,\n\t\tMatButtonModule,\n\t\tMatToolbarModule,\n\t\tMatCardModule,\n\t\tMatTabsModule,\n\t\tMatIconModule,\n\t\t MatInputModule,\n\t\t ReactiveFormsModule,\n\t\t FormsModule,\n\t\t MatRadioModule,\n\t\t MatDatepickerModule,\n\t\t MatNativeDateModule,\n\t\t MatTableModule,\n\t\t MatSnackBarModule,\n\t\t MatPaginatorModule,\n         MatDialogModule,\n\t\t MatSortModule,\n\t\t MatSelectModule,\n\t\t MatAutocompleteModule,\n         MatProgressSpinnerModule\n\t],\n\tdeclarations: [FrameMaterialComponent,FrameTypeComponent,LensTypeComponent,BoxModelComponent, BoxModelAddComponent, BoxModelEditComponent, LensTypeAddComponent, LensTypeEditComponent, FrameMaterialAddComponent, FrameMaterialEditComponent, FrameTypeAddComponent, FrameTypeEditComponent, FrameModelComponent, FrameModelAddComponent, FrameModelEditComponent, BrandComponent, BrandAddComponent, BrandEditComponent],\n\tproviders:[],\n\tentryComponents:[FrameMaterialEditComponent,FrameTypeEditComponent,LensTypeEditComponent,BoxModelEditComponent,BrandEditComponent,FrameModelEditComponent]\n})\nexport class ProductModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FrameMaterialComponent } from './glasses/frame-material/frame-material.component';\nimport { FrameTypeComponent } from './glasses/frame-type/frame-type.component';\nimport { LensTypeComponent } from './glasses/lens-type/lens-type.component';\nimport { BoxModelComponent } from './boxes/box-model/box-model.component';\nimport { FrameMaterialAddComponent } from './glasses/frame-material-add/frame-material-add.component';\nimport { FrameTypeAddComponent } from './glasses/frame-type-add/frame-type-add.component';\nimport { LensTypeAddComponent } from './glasses/lens-type-add/lens-type-add.component';\nimport { BoxModelAddComponent } from './boxes/box-model-add/box-model-add.component';\nimport { BrandComponent } from './brands/brand/brand.component';\nimport { BrandAddComponent } from './brands/brand-add/brand-add.component';\nimport { FrameModelComponent } from './glasses/frame-model/frame-model.component';\nimport { FrameModelAddComponent } from './glasses/frame-model-add/frame-model-add.component';\n\nconst productroutes: Routes = [\n    { path: 'glasses/frame_material', component: FrameMaterialComponent },\n    { path: 'glasses/frame_material/add', component: FrameMaterialAddComponent },\n    { path: 'glasses/frame_model', component: FrameModelComponent },\n    { path: 'glasses/frame_model/add', component: FrameModelAddComponent },\n    { path: 'glasses/frame_type', component: FrameTypeComponent },\n    { path: 'glasses/frame_type/add', component: FrameTypeAddComponent },\n    { path: 'glasses/lens_type', component: LensTypeComponent },\n    { path: 'glasses/lens_type/add', component: LensTypeAddComponent },\n    { path: 'boxes/box_model', component: BoxModelComponent },\n    { path: 'boxes/box_model/add', component: BoxModelAddComponent },\n    { path: 'brands/brand', component: BrandComponent },\n    { path: 'brands/brand/add', component: BrandAddComponent },\n  \t\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(productroutes)\n  \t],\n  exports: [\n    RouterModule\n  ]\n})\nexport class ProductRouterModule {}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Boxes } from '../models/boxes';\nimport { Utils } from '../utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoxesService {\n  headers: any;\n  constructor(private httpClient: HttpClient) { \n    this.headers = new HttpHeaders().set('content-type', 'application/json');\n  }\n  \n  public addBoxes(boxes:Boxes){\n    return this.httpClient.post(`${Utils.addBoxesURL()}`,boxes,(this.headers));\n  }\n  public getallBoxes(){\n    return this.httpClient.get(`${Utils.getallBoxesURL()}`);\n  }\n  public updateBoxes(boxes:Boxes){\n    return this.httpClient.put(`${Utils.updateBoxesURL()}`+`/${boxes.uuid}`,boxes);\n  }\n  // public findByName(powerlenstype: string,name:string) {\n  //  return this.httpClient.get(`${Utils.findByNameURL()}`+`?powerlenstype=${powerlenstype}&name=${name}`,{\n  //     responseType:'json'\n  //   })\n  // }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Brand } from '../models/brand';\nimport { Utils } from '../utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrandService {\n\n  constructor(private httpClient: HttpClient) { }\n  \n  public addBrand(brand:Brand){\n    return this.httpClient.post(`${Utils.addBrandURL()}`,brand);\n  }\n  public getallBrand(){\n    return this.httpClient.get(`${Utils.getallBrandURL()}`);\n  }\n  \n  public updateBrand(brand:Brand){\n    return this.httpClient.put(`${Utils.updateBrandURL()}`+`/${brand.uuid}`,brand);\n  }\n  public deleteBrand(uuid:string){\n    return this.httpClient.delete(`${Utils.deleteBrandURL()}`+`/${uuid}`);\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Utils } from '../utils';\nimport { FrameMaterial } from '../models/frame-material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FrameMaterialService {\n\n  constructor(private httpClient: HttpClient) { }\n  \n  public addFrameMaterial(framematerial:FrameMaterial){\n    return this.httpClient.post(`${Utils.addframematerialURL()}`,framematerial);\n  }\n  public getallFrameMaterial(){\n    return this.httpClient.get(`${Utils.getallframematerialURL()}`);\n  }\n  \n  public updateFrameMaterial(framematerial:FrameMaterial){\n    return this.httpClient.put(`${Utils.updateframematerialURL()}`+`/${framematerial.uuid}`,framematerial);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { FrameModel } from '../models/frame-model';\nimport { Utils } from '../utils';\nimport { Brand } from '../models/brand';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FrameModelService {\n\n  constructor(private httpClient: HttpClient) { }\n  \n  public addFrameModel(framemodel:FrameModel){\n    return this.httpClient.post(`${Utils.addframemodelURL()}`,framemodel);\n  }\n  public getallFrameModel(){\n    return this.httpClient.get(`${Utils.getallframemodelURL()}`);\n  }\n  \n  public updateFrameModel(framemodel:FrameModel){\n    return this.httpClient.put(`${Utils.updateframemodelURL()}`+`/${framemodel.uuid}`,framemodel);\n  }\n  // public findByModel(model: string,brand:Brand) {\n  //   let httpHeaders = new HttpHeaders()\n  //     .set('Accept', 'application/json');\n  //   let httpParams = new HttpParams()\n  //     .set('mobile', model);\n  //   return this.httpClient.get(`${Utils.findByModelURL()}`, {\n  //     headers: httpHeaders,\n  //     params: httpParams,\n  //     responseType: 'json'\n  //   });\n  // }\n  public findByModel(model: string,brandUuid:string) {\n   \n    return this.httpClient.get(`${Utils.findByModelURL()}`+`?model=${model}&brand=${brandUuid}`,{\n      responseType:'json'\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { LensType } from '../models/lens-type';\nimport { Utils } from '../utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LensTypeService {\n\n  constructor(private httpClient: HttpClient) { }\n  \n  public addLensType(lenstype:LensType){\n    return this.httpClient.post(`${Utils.addLensTypeURL()}`,lenstype);\n  }\n  public getallLensType(){\n    return this.httpClient.get(`${Utils.getallLensTypeURL()}`);\n  }\n  public updateLensType(lenstype:LensType){\n    return this.httpClient.put(`${Utils.updateLensTypeURL()}`+`/${lenstype.uuid}`,lenstype);\n  }\n  public findByName(powerlenstype: string,name:string) {\n   return this.httpClient.get(`${Utils.findByNameURL()}`+`?powerlenstype=${powerlenstype}&name=${name}`,{\n      responseType:'json'\n    })\n  }\n}\n"],"sourceRoot":""}