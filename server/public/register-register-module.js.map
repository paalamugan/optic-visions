{"version":3,"sources":["webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.scss","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/register/register.module.ts"],"names":[],"mappings":"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","file":"register-register-module.js","sourcesContent":["module.exports = \"\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:#e0e0e0;\\\">\\n\\n    <mat-card fxFlex=\\\"50\\\" class=\\\"mat-elevation-z4 visionheight\\\">\\n        <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n        </div>\\n      <mat-card-title style=\\\"text-align:center\\\" class=\\\"opticvision\\\">\\n  \\n        <img src=\\\"assets/camera.png\\\" width=\\\"50px\\\">\\n        <span>ptic Visions</span>\\n  \\n      </mat-card-title>\\n      <mat-card-content class=\\\"opticvision_1\\\">\\n        <div class=\\\"backgroundcolor\\\">\\n          <h3 style=\\\"text-align:center; padding: 5px;\\\">Sign Up For Admin</h3>\\n        </div>\\n  \\n        <form  [formGroup]=\\\"RegistrationForm\\\" class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\"\\n          #userForm=\\\"ngForm\\\">\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n                <mat-form-field class=\\\"full-width\\\">\\n                  <input matInput type=\\\"text\\\" placeholder=\\\"CompanyName\\\" name=\\\"companyName\\\" formControlName=\\\"companyName\\\" required>\\n                  <mat-error *ngFor=\\\"let validation of account_validation_messages.companyname\\\">\\n                    <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('companyName').hasError(validation.type) && (RegistrationForm.get('companyName').dirty || RegistrationForm.get('companyName').touched)\\\">{{validation.message}}</mat-error>\\n                  </mat-error>\\n                </mat-form-field>\\n            </div>\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n              <mat-form-field class=\\\"full-width\\\">\\n                <input matInput type=\\\"text\\\" placeholder=\\\"UserName\\\" name=\\\"userName\\\" formControlName=\\\"userName\\\" required>\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.username\\\">\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('userName').hasError(validation.type) && (RegistrationForm.get('userName').dirty || RegistrationForm.get('userName').touched)\\\">{{validation.message}}</mat-error>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n                <mat-form-field class=\\\"full-width\\\">\\n                    <input matInput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.email\\\">\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('email').hasError(validation.type) && (RegistrationForm.get('email').dirty || RegistrationForm.get('email').touched)\\\">{{validation.message}}</mat-error>\\n                    </mat-error>\\n                  </mat-form-field>\\n              </div>\\n              <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n                <mat-form-field class=\\\"full-width\\\">\\n                    <input matInput placeholder=\\\"Password\\\" name=\\\"password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"password\\\" required>\\n                    <mat-icon matSuffix class=\\\"cursor\\\" (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.password\\\">\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('password').hasError(validation.type) && (RegistrationForm.get('password').dirty || RegistrationForm.get('password').touched)\\\">{{validation.message}}</mat-error>\\n                    </mat-error>\\n                  </mat-form-field>\\n              </div>\\n          </div>\\n         \\n  \\n          <!-- <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n                <mat-form-field class=\\\"full-width\\\">\\n                    <input matInput placeholder=\\\"Confirm Password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"cnfPassword\\\"  [errorStateMatcher]=\\\"parentErrorStateMatcher\\\" required>\\n                    <mat-icon matSuffix class=\\\"cursor\\\" (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.confirm_password\\\">\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"(RegistrationForm.get('cnfPassword').hasError(validation.type)|| RegistrationForm.get('password').hasError(validation.type)) && (RegistrationForm.get('cnfPassword').dirty || RegistrationForm.get('cnfPassword').touched)\\\">{{validation.message}}</mat-error>\\n                    </mat-error>\\n                  </mat-form-field>\\n                <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n                  <input matInput placeholder=\\\"Re-enter Password\\\" type=\\\"password\\\"  formControlName=\\\"cnfPassword\\\"  id=\\\"cnfPass\\\">\\n    \\n                </mat-form-field>\\n                <span *ngIf=\\\"isValid('cnfPassword')\\\">Password and confirm password should match</span>\\n              </div>\\n           \\n          </div> -->\\n  \\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n              <mat-form-field class=\\\"full-width\\\" hintLabel=\\\"Max 10 numbers\\\">\\n                  <span matPrefix>+91 &nbsp;</span>\\n                  <input matInput type=\\\"text\\\" #input1 maxlength=\\\"10\\\" name=\\\"phoneNumber\\\" placeholder=\\\"PhoneNumber\\\" formControlName=\\\"phoneNumber\\\">\\n                  <!-- <mat-icon matSuffix>mode_edit</mat-icon> -->\\n                  <!-- <mat-hint align=\\\"end\\\">{{input1.value?.length || 0}}/10</mat-hint>\\n                  <mat-error *ngFor=\\\"let validation of account_validation_messages.phonenumber\\\">\\n                    <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('phoneNumber').hasError(validation.type) && (RegistrationForm.get('phoneNumber').dirty || RegistrationForm.get('phoneNumber').touched)\\\">{{validation.message}}</mat-error>\\n                  </mat-error> -->\\n                </mat-form-field>\\n            <!-- <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n              <input matInput placeholder=\\\"Phone Number\\\" type=\\\"number\\\" formControlName=\\\"phoneNumber\\\" id=\\\"phoneNumber\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span *ngIf=\\\"isValid('phoneNumber')\\\">phoneNumber is required</span> -->\\n          </div>\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n              <mat-form-field class=\\\"full-width\\\">\\n                <input matInput placeholder=\\\"Tin Number\\\" name=\\\"tinNumber\\\" formControlName=\\\"tinNumber\\\" id=\\\"tinNumber\\\">\\n  \\n              </mat-form-field>\\n            </div>\\n\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\" style=\\\"margin-bottom: 20px\\\">\\n            <div fxFlex=\\\"100\\\" class=\\\"example-container\\\">\\n              <mat-form-field class=\\\"full-width\\\" hintLabel=\\\"Max 256 characters\\\">\\n                <input matInput type=\\\"text\\\" #input maxlength=\\\"256\\\" name=\\\"address\\\" placeholder=\\\"Address\\\" formControlName=\\\"address\\\">\\n                <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/256</mat-hint>\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.address\\\">\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('address').hasError(validation.type) && (RegistrationForm.get('address').dirty || RegistrationForm.get('address').touched)\\\">{{validation.message}}</mat-error>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n         <!-- <div fxLayout=\\\"row\\\">\\n           <div fxFlex=\\\"100\\\">\\n             \\n                  <input type=\\\"file\\\"  (change)=\\\"onFileChange($event)\\\" style=\\\"display:none\\\" name=\\\"file-7[]\\\" id=\\\"file-7\\\" class=\\\"inputfile inputfile-6\\\" data-multiple-caption=\\\"{count} files selected\\\" multiple />\\n                  <label class=\\\"box\\\" for=\\\"file-7\\\"><span [ngStyle]=\\\"styleOne?{'color': 'black'} : {'color': 'white'}\\\"></span> <strong><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"17\\\" viewBox=\\\"0 0 20 17\\\"><path d=\\\"M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z\\\"/></svg> Upload a Image&hellip;</strong></label>\\n              \\n              <label for=\\\"file-upload\\\" class=\\\"custom-file-upload\\\">\\n                  Custom Upload\\n              </label>\\n              <div class=\\\"file-field\\\">\\n                  <div class=\\\"btn btn-primary btn-sm float-left\\\">\\n                      <span>Choose file</span>\\n                      <input type=\\\"file\\\">\\n                  </div>\\n                  <div class=\\\"file-path-wrapper\\\">\\n                      <input class=\\\"file-path validate\\\" type=\\\"text\\\" placeholder=\\\"Upload your file\\\">\\n                  </div>\\n              </div>\\n              <input id=\\\"file-upload\\\"style=\\\"width:200px\\\" size=\\\"60\\\" value=\\\"upload\\\" type=\\\"file\\\"/>\\n              <input id=\\\"photo\\\" type=\\\"file\\\" /> \\n            </div>\\n            </div> -->\\n         \\n  \\n  \\n  \\n  \\n          <button mat-raised-button type=\\\"reset\\\" color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login register_margin\\\" [disabled]=\\\"userForm.invalid\\\" (click)=\\\"signUp()\\\">REGISTER</button>\\n       \\n        </form>\\n  \\n      </mat-card-content>\\n      <div style=\\\"text-align: center;\\\">\\n        <button mat-raised-button color=\\\"primary\\\" class=\\\"login register_margin\\\" (click)=\\\"movetologin()\\\">Back to LoginPage</button>                \\n      </div>\\n  \\n    </mat-card>\\n   \\n    \\n  </div>\\n  <!-- <div fxLayout=\\\"column\\\" fxFlexFill fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:whitesmoke\\\">\\n    \\n    <mat-card>\\n      <div>\\n        <mat-card-title>\\n            <div class=\\\"opticvision\\\">\\n              <img src=\\\"assets/camera.png\\\" width=\\\"30px\\\"> \\n              <span>ptic Visions</span>\\n            </div>\\n          </mat-card-title>\\n          <mat-card-content>\\n              <form class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\n                  <mat-form-field class=\\\"form_bottom\\\">\\n                      <input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\n                    \\n                      </mat-form-field>\\n                    <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\n                    <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\n              \\n                    </span>\\n                  <mat-form-field class=\\\"form_bottom\\\">\\n                    <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\n                      <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon> \\n                    </mat-form-field>\\n                    <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\n                      <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\n                \\n                      </span>\\n                <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\">Log In</button>\\n              </form>\\n              <div style=\\\"text-align:right\\\">\\n                  <h3><a  class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Signup For Admin</a></h3>\\n              </div>\\n              \\n            </mat-card-content>\\n          </div>\\n    </mat-card>\\n    \\n  </div>\\n       -->\\n  \\n  \\n  \\n  \\n  \\n  <!-- <div fxLayout=\\\"row\\\" fxFlexFill fxLayoutAlign=\\\"center\\\" style=\\\"background-color:#677069;\\\">\\n  \\n          <div class=\\\" mat-elevation-z4\\\" >\\n              <mat-card class=\\\"card\\\">\\n                  <mat-card-title>\\n                    <h2>SIGN IN</h2>\\n                  </mat-card-title>\\n                  <mat-card-content>\\n                      <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\n                          <mat-form-field>\\n                              <input matInput placeholder=\\\"Enter your email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\n                            \\n                              </mat-form-field>\\n                            <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\n                            <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\n                      \\n                            </span>\\n                        <mat-form-field>\\n                            <input matInput placeholder=\\\"Enter your password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\n                             <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n                            </mat-form-field>\\n                            <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\n                              <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\n                        \\n                              </span>\\n                        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"userForm.invalid\\\">log in</button>\\n                      </form>\\n                    </mat-card-content>\\n                    <a class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Register an account</a>\\n                  </mat-card>\\n            \\n  \\n    </div>\\n  \\n  </div> -->\\n\\n\\n<!-- <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:#e0e0e0;\\\">\\n\\n  <mat-card fxFlex=\\\"50\\\" class=\\\"mat-elevation-z4 visionheight\\\">\\n    <mat-card-title style=\\\"text-align:center\\\" class=\\\"opticvision\\\">\\n\\n      <img src=\\\"assets/camera.png\\\" width=\\\"50px\\\">\\n      <span>ptic Visions</span>\\n\\n    </mat-card-title>\\n    <mat-card-content class=\\\"opticvision_1\\\">\\n      <div class=\\\"backgroundcolor\\\">\\n        <h3 style=\\\"text-align:center; padding: 5px;\\\">Sign Up For Admin</h3>\\n      </div>\\n\\n      <form  [formGroup]=\\\"Registeration\\\" class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\"\\n        #userForm=\\\"ngForm\\\">\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"CompanyName\\\" #companyname=\\\"ngModel\\\" [ngModel]=\\\"companyName\\\" name=\\\"companyname\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span style=\\\"color:red\\\" *ngIf=\\\"companyname.touched && !companyname.valid\\\">\\n                <div *ngIf=\\\"companyname.errors.required\\\">CompanyName is Required</div>\\n  \\n              </span>\\n          </div>\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Tin Number\\\" #tinnumber=\\\"ngModel\\\" [ngModel]=\\\"tinNumber\\\" name=\\\"tinnumber\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span style=\\\"color:red\\\" *ngIf=\\\"tinnumber.touched && !tinnumber.valid\\\">\\n                <div *ngIf=\\\"tinnumber.errors.required\\\">Tin.No is Required</div>\\n  \\n              </span>\\n          </div>\\n        </div>\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n              <input matInput placeholder=\\\"UserName\\\" #userName=\\\"ngModel\\\" [ngModel]=\\\"username\\\" name=\\\"username\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span style=\\\"color:red\\\" *ngIf=\\\"userName.touched && !userName.valid\\\">\\n              <div *ngIf=\\\"userName.errors.required\\\">FirstName is Required</div>\\n\\n            </span>\\n          </div>\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\" [ngModel]=\\\"emailname\\\" name=\\\"email\\\" pattern=\\\"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\\\"\\n                  required>\\n  \\n              </mat-form-field>\\n              <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\n                <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\n                <div *ngIf=\\\"email.errors.pattern\\\">Not a Valid Email</div>\\n              </span>\\n            </div>\\n        \\n        </div>\\n       \\n\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n                <mat-form-field>\\n                  <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\"\\n                    required>\\n                  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>  \\n                </mat-form-field>\\n                <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\n                  <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\n    \\n                </span>\\n              </div>\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n              <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n                <input matInput placeholder=\\\"ConfirmPassword\\\" #cnfPassword=\\\"ngModel\\\" [ngModel]=\\\"cnfpassword\\\" name=\\\"cnfpassword\\\" required>\\n  \\n              </mat-form-field>\\n              <span style=\\\"color:red\\\" *ngIf=\\\"cnfPassword.touched && !cnfPassword.valid\\\">\\n                <div *ngIf=\\\"cnfPassword.errors.required\\\">LastName is Required</div>\\n              </span>\\n            </div>\\n         \\n        </div>\\n\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n              \\n              <input matInput placeholder=\\\"Address\\\" #address=\\\"ngModel\\\" [ngModel]=\\\"Address\\\" name=\\\"address\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span style=\\\"color:red\\\" *ngIf=\\\"address.touched && !address.valid\\\">\\n                <div *ngIf=\\\"address.errors.required\\\">Address is Required</div>\\n  \\n              </span>\\n          </div>\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\n              <input matInput placeholder=\\\"Phone Number\\\" #phonenumber=\\\"ngModel\\\" [ngModel]=\\\"Phonenumber\\\" name=\\\"phonenumber\\\"\\n                required>\\n\\n            </mat-form-field>\\n            <span style=\\\"color:red\\\" *ngIf=\\\"phonenumber.touched && !phonenumber.valid\\\">\\n                <div *ngIf=\\\"phonenumber.errors.required\\\">Phone Number is Required</div>\\n  \\n              </span>\\n          </div>\\n        </div>\\n\\n\\n\\n\\n        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\" (click)=\\\"signUp()\\\">REGISTER</button>\\n\\n      </form>\\n\\n    </mat-card-content>\\n\\n\\n  </mat-card>\\n</div>\\n <div fxLayout=\\\"column\\\" fxFlexFill fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:whitesmoke\\\">\\n\\t\\n\\t<mat-card>\\n\\t\\t<div>\\n\\t\\t\\t<mat-card-title>\\n\\t\\t\\t\\t\\t<div class=\\\"opticvision\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"assets/camera.png\\\" width=\\\"30px\\\"> \\n\\t\\t\\t\\t\\t\\t<span>ptic Visions</span>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</mat-card-title>\\n\\t\\t\\t\\t<mat-card-content>\\n\\t\\t\\t\\t\\t\\t<form class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"form_bottom\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"form_bottom\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon> \\n\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t  <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\">Log In</button>\\n\\t\\t\\t\\t\\t\\t</form>\\n\\t\\t\\t\\t\\t\\t<div style=\\\"text-align:right\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h3><a  class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Signup For Admin</a></h3>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t</mat-card-content>\\n\\t\\t\\t\\t</div>\\n\\t</mat-card>\\n\\t\\n</div>\\n\\t\\t -->\\n\\n\\n\\n\\n\\n<!-- <div fxLayout=\\\"row\\\" fxFlexFill fxLayoutAlign=\\\"center\\\" style=\\\"background-color:#677069;\\\">\\n\\n\\t\\t\\t\\t<div class=\\\" mat-elevation-z4\\\" >\\n\\t\\t\\t\\t\\t\\t<mat-card class=\\\"card\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-card-title>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<h2>SIGN IN</h2>\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-card-title>\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-card-content>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"userForm.invalid\\\">log in</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</form>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-card-content>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Register an account</a>\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-card>\\n\\t        \\n\\n\\t</div>\\n\\n</div> --> \"","module.exports = \".login {\\n  font-size: 20px;\\n  font-weight: bold;\\n  color: white;\\n  font-family: -webkit-body;\\n  margin: 5px 0; }\\n\\n.forget {\\n  color: dodgerblue;\\n  text-align: right; }\\n\\n.opticvision {\\n  font-size: 50px;\\n  font-family: -webkit-body; }\\n\\n.opticvision span {\\n  color: dodgerblue; }\\n\\ndiv > span {\\n  font-size: 0.75rem;\\n  color: firebrick; }\\n\\n.is-invalid {\\n  font-size: 0.75rem;\\n  color: firebrick; }\\n\\n.form_bottom {\\n  margin: 20px 0px; }\\n\\n.visionheight {\\n  background-color: #ffffff; }\\n\\n.cursor {\\n  cursor: pointer; }\\n\\n@media only screen and (min-width: 1281px) {\\n  .opticvision_1 {\\n    font-size: 18px;\\n    font-family: -webkit-body; } }\\n\"","import { Component, OnInit, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators, AbstractControl, FormBuilder } from '@angular/forms';\nimport{ passValidator,account_validation_messages } from '../custom-validators/custom-validator';\nimport { SignupService } from '../services/signup.service';\nimport { MatSnackBar } from '@angular/material';\nimport { HttpErrorResponse } from '@angular/common/http';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  email=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\";\n  hide = true;\n  account_validation_messages=account_validation_messages;\n  styleOne:boolean;\n  selectedfile:File=null;\n  isLoadingResults:boolean=false;\n  //RegistrationForm: FormBuilder;\n  constructor(private router:Router,private elem: ElementRef,private fb:FormBuilder,private signupservice:SignupService,private snackbar:MatSnackBar,private cd: ChangeDetectorRef) {\n\n    // this.Registeration = new FormGroup({\n    //   companyName: new FormControl(null, Validators.required),\n    //   tinNumber: new FormControl(null, Validators.required),\n    //   userName: new FormControl(null, Validators.required),\n    //   email: new FormControl(null, Validators.email),\n    //   password: new FormControl(null, Validators.required),\n    //   cnfPassword: new FormControl(null, this.passValidator),\n    //   address: new FormControl(null, Validators.required),\n    //   phoneNumber: new FormControl(null, Validators.required)\n    // });\n    // this.Registeration.controls.password.valueChanges\n    //   .subscribe(\n    //     x => this.Registeration.controls.cnfPassword.updateValueAndValidity()\n    //   );\n   }\n  \n    RegistrationForm =this.fb.group({\n  companyName: ['',[Validators.required]],\n  tinNumber: [''],\n  userName: ['',Validators.compose([\n\t\tValidators.maxLength(25),\n\t\tValidators.minLength(3),\n\t\tValidators.pattern('^[a-zA-Z_ ]*$'),\n\t\tValidators.required\n\t])],\n  email: ['',Validators.compose([\n  \tValidators.required,\n  \tValidators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n  ])\n],\n  password: ['',Validators.compose([\n    Validators.minLength(5),\n    Validators.required,\n    // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$') //this is for the letters (both uppercase and lowercase) and numbers validation\n ])\n],\n//   cnfPassword: ['',Validators.compose([\n//     Validators.required,\n//     passValidator\n//  ])],\n  address: ['',[Validators.required]],\n  phoneNumber: ['',Validators.compose([\n    Validators.minLength(10),\n    Validators.pattern('^[0-9]*$') //this is for the number with  validation\n ])],\n})\n  ngOnInit() {\n    ;( function ( document, window, index )\n{\n\tvar inputs = document.querySelectorAll( '.inputfile' );\n\tArray.prototype.forEach.call( inputs, function( input )\n\t{\n\t\tvar label\t = input.nextElementSibling,\n\t\t\tlabelVal = label.innerHTML;\n\n\t\tinput.addEventListener( 'change', function( e )\n\t\t{\n\t\t\tvar fileName = '';\n\t\t\tif( this.files && this.files.length > 1 )\n\t\t\t\tfileName = ( this.getAttribute( 'data-multiple-caption' ) || '' ).replace( '{count}', this.files.length );\n\t\t\telse\n\t\t\t\tfileName = e.target.value.split( '\\\\' ).pop();\n\n\t\t\tif( fileName )\n\t\t\t\tlabel.querySelector( 'span' ).innerHTML = fileName;\n\t\t\telse\n\t\t\t\tlabel.innerHTML = labelVal;\n\t\t});\n\n\t\t// Firefox bug fix\n\t\tinput.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });\n\t\tinput.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });\n\t});\n}( document, window, 0 ));\n  }\n  countfilelength:number;\n  onFileChange(event) {\n   // let count=<File>event.target.files\n   this.styleOne=true;\n   this.countfilelength=event.target.files.length;\n     this.selectedfile=<File>event.target.files[0];\n    \n     \n    // console.log(this.selectedFile)\n    // let inputEl: HTMLInputElement = this.elem.nativeElement.querySelector('#file-7');\n    // console.log(inputEl.files.item(0));\n   // this.RegistrationForm.getValue('photo').value\n    // const reader = new FileReader();\n \n    // if(event.target.files && event.target.files.length) {\n    //   const [file] = event.target.files;\n    //   reader.readAsDataURL(file);\n  \n    //   reader.onload = () => {\n    //     this.RegistrationForm.patchValue({\n    //       file: reader.result\n    //    });\n      \n    //     // need to run CD since file load runs outside of zone\n    //     this.cd.markForCheck();\n    //   };\n    // }\n  }\n  signUp(){\n   let formData = new FormData();\n    this.isLoadingResults = true;\n\n        //   formData.append('avatar', this.selectedfile);\n          formData.append('companyName', this.RegistrationForm.value.companyName);\n          formData.append('tin', this.RegistrationForm.value.tinNumber);\n          formData.append('userName', this.RegistrationForm.value.userName);\n          formData.append('email', this.RegistrationForm.value.email);\n          formData.append('password', this.RegistrationForm.value.password);\n          formData.append('address', this.RegistrationForm.value.address);\n          formData.append('phoneNumber', this.RegistrationForm.value.phoneNumber);\n          this.signupservice.submitRegister(formData)\n          .subscribe(\n            (response)=>{\n                this.isLoadingResults = false;\n              this.styleOne=false;\n              // this.RegistrationForm.reset(true);\n              //  this.selectedfile=null;\n                this.snackbar.open(\"Registration Success\", \"Success\", {\n                duration: 2000,\n                      });\n              this.router.navigate(['/login']);\n            },\n           \n            (err) => {\n                if(err instanceof HttpErrorResponse) {\n                    this.isLoadingResults = false;\n                    this.snackbar.open(err.error.error, 'Alert', {\n                            duration:3000\n                    });\n                }\n            },\n            () => {\n                this.isLoadingResults = false;\n            });\n     \n    }\n    movetologin(){\n    this.router.navigate(['/login']);\n    }\n\n  \n  \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RegisterComponent } from './register.component';\nimport { RouterModule, Routes } from '@angular/router'; \nimport { \n  MatCardModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatIconModule,\n  MatInputModule,\n  MatToolbarModule\n } from '@angular/material';\n import { MDBBootstrapModule } from 'angular-bootstrap-md';\n import {MatTabsModule} from '@angular/material/tabs';\n import {MatSnackBarModule} from '@angular/material/snack-bar';\n import {MatCheckboxModule} from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule , ReactiveFormsModule} from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nconst appRoutes: Routes = [\n    { path: '', component: RegisterComponent },\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCardModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatIconModule,\n  MatInputModule,\n  MatToolbarModule,\n  MatCheckboxModule,\n  MatFormFieldModule,\n  FormsModule,\n  ReactiveFormsModule,\n  FlexLayoutModule,\n  MatSnackBarModule,\n  MatTabsModule,\n  MatProgressSpinnerModule,\n  MDBBootstrapModule.forRoot(),\n  RouterModule.forChild(appRoutes),\n  ],\n  declarations: [RegisterComponent]\n})\nexport class RegisterModule { }\n"],"sourceRoot":""}